Thu Feb  8 14:59:03 CST 2024
Autoloading gcc/11.2.0

Loading proteus/fct/gcc-11.2.0
  Loading requirement: gcc/11.2.0
[       2] Initializing Proteus
[       2] Initializing MPI
[       3] Adding . to path for loading modules
[       3] Loading problem-specific modules
[       3] Importing input modules
[       3] /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/TwoPhaseFlow/utils/
[       3] Loading so module = TwoPhaseFlow_so.py
[       5] Context input options:
ns_model[1] ns_model={0,1} for {rans2p,rans3p}

final_time[100.0] Final time for simulation

sampleRate[0.1] Time interval to output solution

gauges[True] Collect data for validation

cfl[0.9] Desired CFL restriction

he[0.04] Max mesh element diameter

hv[1.03] water depth at vegetation

Hm[0.2] significant wave height

Tp[1.85] peak wave period

mangrove_porous[True] turn on porous zone for mangrove section

mangrove_density[HD] mangrove density

ncell[28] number of porous layer for the mangrove section

h_cell[0.05] height of each porous layer

filename[inp_HD_TR1.csv] incident wave record of the first wave gauge

wave_type[Time] runs simulation with experimental wave record

nfb[100] number of frequency bin for reconstructing experimental wave data


[       5] Processing context input options from commandline
[       5] he = 0.04
[       5] Processing context input options from commandline
[       5] mangrove_porous = True
[       5] Processing context input options from commandline
[       5] filename = 'inp_HD_TR1.csv'
[       5] INFO WaveTools.py: Not constant sampling rate found, proceeding to signal interpolation to a constant sampling rate
[       5] INFO: WaveTools.py: performing a direct series decomposition
[       5] WARNING: Dirichlet condition for k in Atmosphere has not been set. Ignore if RANS is not used
[       5] WARNING: Dirichlet condition for dissipation in Atmosphere has not been set. Ignore if RANS is not used
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] Key RelaxZones is already attached.
[       5] ----------
[       5] Mesh Options
[       5] nd: 2
[       5] he: 0.04
[       5] use_gmsh: False
[       5] genMesh: True
[       5] outputFiles_name: mesh
[       5] outputFiles: {'poly': True, 'ply': False, 'asymptote': False, 'geo': False}
[       5] restrictFineSolutionToAllMeshes: False
[       5] parallelPartitioningType: 1
[       5] nLayersOfOverlapForParallel: 1
[       5] triangleOptions: VApq30Dena0.00080000
[       5] nLevels: 1
[       5] structured: False
[       5] nn: None
[       5] nnx: None
[       5] nny: None
[       5] nnz: None
[       5] triangleFlag: 1
[       5] triangle_string: VApq30Dena
[       5] ----------
[       5] Physical Parameters
[       5] name: SystemPhysics
[       5] gravity: [ 0.   -9.81  0.  ]
[       5] nu_0: 1.004e-06
[       5] rho_0: 998.2
[       5] nu_1: 1.5e-05
[       5] rho_1: 1.205
[       5] surf_tension_coeff: 0.0728
[       5] movingDomain: False
[       5] initialConditions: None
[       5] boundaryConditions: None
[       5] useBoundaryConditionsModule: True
[       5] useRANS: False
[       5] modelDict: OrderedDict([('flow', <proteus.TwoPhaseFlow.utils.Parameters.ParametersModelRANS2P object at 0x14893cda8c10>), ('vof', <proteus.TwoPhaseFlow.utils.Parameters.ParametersModelVOF object at 0x14893cdaa890>), ('ncls', <proteus.TwoPhaseFlow.utils.Parameters.ParametersModelNCLS object at 0x14893cdab9a0>), ('rdls', <proteus.TwoPhaseFlow.utils.Parameters.ParametersModelRDLS object at 0x14893cdabb80>), ('mcorr', <proteus.TwoPhaseFlow.utils.Parameters.ParametersModelMCorr object at 0x14893cda81f0>)])
[       5] ----------
[       5] RANS2P.SubgridError: lagging requested but must lag the first step; switching lagging off and delaying
[       5] RANS2P.ShockCapturing: lagging requested but must lag the first step; switching lagging off and delaying
[       5] TwoPhaseFlow parameters for model: rans2p
[       5] -----
[       5] rans2p PHYSICS
[       5] -----
[       5] COEFFICIENTS OPTIONS
[       5] CLSVOF_model: None
[       5] Closure_0_model: None
[       5] Closure_1_model: None
[       5] KN_model: None
[       5] L: [1. 1. 1.]
[       5] LAG_LES: 1.0
[       5] LS_model: 2
[       5] ME_model: 0
[       5] MOMENTUM_SGE: 1.0
[       5] NONCONSERVATIVE_FORM: 1.0
[       5] PRESSURE_PROJECTION_STABILIZATION: 0.0
[       5] PRESSURE_SGE: 1.0
[       5] VELOCITY_SGE: 1.0
[       5] VF_model: 1
[       5] advection: {0: {0: 'linear', 1: 'linear', 2: 'linear'}, 1: {0: 'nonlinear', 1: 'nonlinear', 2: 'nonlinear'}, 2: {0: 'nonlinear', 1: 'nonlinear', 2: 'nonlinear'}}
[       5] analyticalSolution: None
[       5] ball_angular_acceleration: []
[       5] ball_angular_velocity: []
[       5] ball_center: []
[       5] ball_center_acceleration: []
[       5] ball_density: []
[       5] ball_force_range: None
[       5] ball_mass: []
[       5] ball_radius: []
[       5] ball_stiffness: None
[       5] ball_velocity: []
[       5] barycenters: [[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
[       5] diffusion: {1: {1: {1: 'constant'}, 2: {2: 'constant'}}, 2: {2: {2: 'constant'}, 1: {1: 'constant'}}}
[       5] dragAlpha: 0.0
[       5] dragAlphaTypes: [0.00000000e+00 0.00000000e+00 1.69139262e+07 1.01598046e+00
 1.05676385e+00 1.05362248e+00 1.06089064e+00 1.63446939e+00
 1.30389039e+00 1.35682620e+00 1.53644328e+00 1.46659068e+00
 1.04725617e+00 1.44952826e+00 1.37403255e+00 1.17450560e+00
 1.12688648e+00 1.52669959e+00 6.60594698e-01 6.67565713e-01
 6.46060711e-01 6.45866241e-01 6.67577077e-01 5.51551667e-01
 7.42140789e-01 5.51549390e-01 5.51554391e-01 7.42120671e-01
 7.42120671e-01 7.42134810e-01 5.51553115e-01]
[       5] dragBeta: 0.0
[       5] dragBetaTypes: [ 0.          0.          0.         22.94924271 22.079065   21.84350614
 24.47860554 33.86361375 46.87702123 33.83201532 29.130056   33.5616879
 36.05156563 46.92904458 67.40867751 31.029444   20.9642474  31.75124684
  4.05730854  3.87374756  4.25665794  4.25779011  3.87360947  4.35448636
  3.87451443  4.3544914   4.35447171  3.87459954  3.87459954  3.87455378
  4.35447903]
[       5] eb_adjoint_sigma: 1.0
[       5] eb_penalty_constant: 100.0
[       5] elementBoundaryIntegralKeys: [('f', 0), ('f', 1), ('f', 2), ('a', 1, 1), ('a', 1, 2), ('a', 2, 2), ('a', 2, 1), ('H', 1), ('H', 2), ('u', 0), ('u', 1), ('u', 2)]
[       5] elementIntegralKeys: [('m', 1), ('m', 2), ('f', 0), ('f', 1), ('f', 2), ('a', 1, 1), ('a', 1, 2), ('a', 2, 2), ('a', 2, 1), ('r', 0), ('r', 1), ('r', 2), ('H', 1), ('H', 2), ('u', 0), ('u', 1), ('u', 2)]
[       5] eps: None
[       5] epsFact: 1.5
[       5] epsFact_density: 1.5
[       5] epsFact_porous: None
[       5] epsFact_solid: None
[       5] forceStrongDirichlet: False
[       5] force_x: None
[       5] force_y: None
[       5] force_z: None
[       5] g: [ 0.   -9.81  0.  ]
[       5] ghost_penalty_constant: 0.1
[       5] hamiltonian: {1: {0: 'linear'}, 2: {0: 'linear'}}
[       5] integrals: {}
[       5] killNonlinearDrag: 0
[       5] linearDragFactor: 1.0
[       5] mass: {1: {1: 'linear'}, 2: {2: 'linear'}}
[       5] movingDomain: False
[       5] nParticles: 0
[       5] nc: 3
[       5] nd: 2
[       5] nonlinearDragFactor: 1.0
[       5] normalize_pressure: False
[       5] nu: 1.004e-06
[       5] nu_0: 1.004e-06
[       5] nu_1: 1.5e-05
[       5] nullSpace: NoNullSpace
[       5] particle_alpha: 1000.0
[       5] particle_beta: 1000.0
[       5] particle_centroids: []
[       5] particle_cfl: 0.001
[       5] particle_epsFact: 3.0
[       5] particle_netForces: []
[       5] particle_netMoments: []
[       5] particle_nitsche: 1.0
[       5] particle_penalty_constant: 100.0
[       5] particle_sdfList: None
[       5] particle_surfaceArea: []
[       5] particle_surfaceArea_projected: []
[       5] particle_velocityList: None
[       5] particle_volume: []
[       5] phaseFunction: None
[       5] phi_s_isSet: False
[       5] porosityTypes: [1.         1.         1.         0.95909506 0.95881683 0.95809525
 0.95471215 0.9509036  0.94716237 0.94853471 0.9466996  0.94717797
 0.94804278 0.94610868 0.9463536  0.95173515 0.9544948  0.95430838
 0.96937776 0.9693883  0.96938878 0.96938878 0.9693883  0.96938849
 0.96938838 0.96938849 0.96938849 0.96938838 0.96938838 0.96938838
 0.96938849]
[       5] potential: {1: {1: 'u'}, 2: {2: 'u'}}
[       5] projection_direction: [1. 0. 0.]
[       5] reaction: {0: {0: 'constant'}, 1: {1: 'nonlinear', 2: 'nonlinear'}, 2: {1: 'nonlinear', 2: 'nonlinear'}}
[       5] rho: 998.2
[       5] rho_0: 998.2
[       5] rho_1: 1.205
[       5] sd: True
[       5] sdInfo: {(1, 1): (array([0, 1, 2], dtype=int32), array([0, 1], dtype=int32)), (1, 2): (array([0, 0, 1], dtype=int32), array([0], dtype=int32)), (2, 2): (array([0, 1, 2], dtype=int32), array([0, 1], dtype=int32)), (2, 1): (array([0, 1, 1], dtype=int32), array([1], dtype=int32))}
[       5] setParamsFunc: None
[       5] sigma: 0.0728
[       5] smagorinskyConstant: 0.1
[       5] stencil: [{0, 1, 2}, {0, 1, 2}, {0, 1, 2}]
[       5] stokes: False
[       5] stress: {}
[       5] turbulenceClosureModel: 0
[       5] useConstant_he: False
[       5] useExact: False
[       5] useInternalParticleSolver: False
[       5] useMetrics: 1.0
[       5] useRBLES: 0.0
[       5] useVF: 0.0
[       5] use_ball_as_particle: 1
[       5] variableNames: ['p', 'u', 'v']
[       5] vectorComponents: [1, 2]
[       5] vectorName: velocity
[       5] END OF COEFFICIENTS OPTIONS
[       5] L: (1.0, 1.0, 1.0)
[       5] (!) LevelModelType: <class 'proteus.mprans.RANS2P.LevelModel'>
[       5] T: 1.0
[       5] (!) advectiveFluxBoundaryConditions: {0: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdb9fc0>, 1: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdb9f30>, 2: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdb9ea0>}
[       5] analyticalSolution: {}
[       5] boundaryCreatesNullSpace: False
[       5] (!) coefficients: <proteus.mprans.RANS2P.Coefficients object at 0x14893cdaa860>
[       5] (!) diffusiveFluxBoundaryConditions: {0: {}, 1: {1: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdb9e10>}, 2: {2: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdb9d80>}}
[       5] (!) dirichletConditions: {0: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdba170>, 1: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdba0e0>, 2: <function ParametersModelRANS2P._initializePhysics.<locals>.<lambda> at 0x14893bdba050>}
[       5] (!) domain: <proteus.Domain.PlanarStraightLineGraphDomain object at 0x14895cd8ace0>
[       5] dummyInitialConditions: False
[       5] finalizeStep: <function finalizeStepDummy at 0x14893dc91240>
[       5] finalizeStepDummy: <function finalizeStepDummy at 0x14893dc91240>
[       5] fluxBoundaryConditions: {}
[       5] genMesh: True
[       5] (!) initialConditions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdaa830>
[       5] meshfile: None
[       5] movingDomain: False
[       5] (!) name: rans2p
[       5] (!) nd: 2
[       5] periodicDirichletConditions: None
[       5] polyfile: None
[       5] reload: <function reload at 0x148a1005dd80>
[       5] sd: True
[       5] stressFluxBoundaryConditions: {}
[       5] weakDirichletConditions: None
[       5] x0: (0.0, 0.0, 0.0)
[       5] -----
[       5] rans2p NUMERICS
[       5] -----
[       5] DT: 1.0
[       5] ShockCapturingOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdaa8f0>
[       5] SubgridErrorOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdaa8c0>
[       5] adaptMesh: False
[       5] adaptMesh_nSteps: 10
[       5] adaptMesh_numIter: 2
[       5] atol: 1e-08
[       5] atol_res: {0: 0.0001}
[       5] atol_u: {0: 0.0001}
[       5] (!) auxiliaryVariables: [<mprans.BoundaryConditions.RelaxationZoneWaveGenerator object at 0x14893e3113a0>, <proteus.Gauges.Gauges object at 0x14893cdaa5f0>, <proteus.Gauges.Gauges object at 0x14893cdaa650>]
[       5] bcsTimeDependent: True
[       5] checkMass: False
[       5] computeEigenvalues: False
[       5] computeEigenvectors: None
[       5] computeLevelLinearSolverRates: False
[       5] computeLinearSmootherRates: False
[       5] computeLinearSolverRates: False
[       5] computeNonlinearLevelSolverRates: False
[       5] computeNonlinearSmootherRates: False
[       5] computeNonlinearSolverRates: True
[       5] (!) conservativeFlux: {0: 'pwl-bdm-opt'}
[       5] (!) elementBoundaryQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14893c4bf550>
[       5] (!) elementQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14895cc2b490>
[       5] (!) femSpaces: {0: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>, 1: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>, 2: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>}
[       5] fullNewtonFlag: True
[       5] hex: None
[       5] (!) l_atol_res: 1.6e-08
[       5] (!) levelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] levelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] levelNonlinearSolverConvergenceTest: r
[       5] (!) linTolFac: 0.01
[       5] linearPostSmooths: 3
[       5] linearPreSmooths: 3
[       5] (!) linearSmoother: <class 'proteus.LinearSolvers.NavierStokes3D'>
[       5] linearSmootherOptions: ()
[       5] (!) linearSolverConvergenceTest: r-true
[       5] linearSolverMaxIts: 1000
[       5] linearWCycles: 3
[       5] (!) linear_solver_options_prefix: rans2p_
[       5] ltol_u: 0.05
[       5] massLumping: False
[       5] matrix: <class 'superluWrappers.SparseMatrix'>
[       5] maxErrorFailures: 10
[       5] (!) maxLineSearches: 0
[       5] (!) maxNonlinearIts: 100
[       5] maxSolverFailures: 10
[       5] multigridCycles: 2
[       5] (!) multilevelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] (!) multilevelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] nDTout: 1
[       5] nLayersOfOverlapForParallel: 1
[       5] nLevels: 1
[       5] nStagesTime: 1
[       5] name: rans2p
[       5] needEBQ: False
[       5] needEBQ_GLOBAL: False
[       5] (!) nl_atol_res: 1.6000000000000001e-06
[       5] nltol_u: 0.33
[       5] nn: 3
[       5] nnx: None
[       5] nny: None
[       5] nnz: None
[       5] nonlinearPostSmooths: 3
[       5] nonlinearPreSmooths: 3
[       5] nonlinearSmoother: None
[       5] nonlinearSolverConvergenceTest: r
[       5] nonlinearSolverNorm: <function l2Norm at 0x14894c056290>
[       5] nonlinearWCycles: 3
[       5] (!) numericalFluxType: <class 'proteus.mprans.RANS2P.NumericalFlux'>
[       5] parallelPartitioningType: 1
[       5] parallelPeriodic: False
[       5] periodicDirichletConditions: None
[       5] postSmooths: 2
[       5] preSmooths: 2
[       5] printLevelLinearSolverInfo: False
[       5] printLinearSmootherInfo: False
[       5] printLinearSolverInfo: False
[       5] printNonlinearLevelSolverInfo: False
[       5] printNonlinearSmootherInfo: False
[       5] printNonlinearSolverInfo: False
[       5] psitc: {'nStepsForce': 3, 'nStepsMax': 100}
[       5] quad: None
[       5] reactionLumping: False
[       5] reload: <function reload at 0x148a1005dd80>
[       5] restrictFineSolutionToAllMeshes: False
[       5] rtol_res: {0: 0.0001}
[       5] rtol_u: {0: 0.0001}
[       5] (!) runCFL: 0.33
[       5] (!) shockCapturing: <proteus.mprans.RANS2P.ShockCapturing object at 0x14893c4bfe80>
[       5] (!) stepController: <class 'proteus.StepControl.Min_dt_cfl_controller'>
[       5] (!) subgridError: <proteus.mprans.RANS2P.SubgridError object at 0x14893c4bfe50>
[       5] (!) timeIntegration: <class 'proteus.TimeIntegration.BackwardEuler_cfl'>
[       5] timeIntegrator: <class 'proteus.TimeIntegration.ForwardIntegrator'>
[       5] timeOrder: 1
[       5] (!) tolFac: 0.0
[       5] (!) triangleFlag: 1
[       5] (!) triangleOptions: VApq30Dena0.00080000
[       5] useEisenstatWalker: False
[       5] ----------
[       5] VOF.ShockCapturing: lagging requested but must lag the first step; switching lagging off and delaying
[       5] TwoPhaseFlow parameters for model: vof
[       5] -----
[       5] vof PHYSICS
[       5] -----
[       5] COEFFICIENTS OPTIONS
[       5] ENTROPY_TYPE: 0
[       5] FCT: True
[       5] LS_modelIndex: None
[       5] LUMPED_MASS_MATRIX: False
[       5] RD_modelIndex: 3
[       5] STABILIZATION_TYPE: 0
[       5] VOS_model: None
[       5] V_model: 0
[       5] advection: {0: {0: 'linear'}}
[       5] cE: 1.0
[       5] cK: 0.0
[       5] cMax: 1.0
[       5] checkMass: True
[       5] diffusion: {}
[       5] ebq_porosity: None
[       5] ebqe_porosity: None
[       5] elementBoundaryIntegralKeys: [('f', 0), ('u', 0)]
[       5] elementIntegralKeys: [('m', 0), ('f', 0), ('u', 0)]
[       5] epsFact: 1.5
[       5] flowCoefficients: None
[       5] flowModelIndex: 0
[       5] forceStrongConditions: False
[       5] hamiltonian: {}
[       5] integrals: {}
[       5] mass: {0: {0: 'linear'}}
[       5] modelIndex: 1
[       5] movingDomain: False
[       5] nc: 1
[       5] nullSpace: NoNullSpace
[       5] outputQuantDOFs: False
[       5] porosity_dof: None
[       5] potential: {}
[       5] q_porosity: None
[       5] reaction: {}
[       5] sc_beta: 1.5
[       5] sc_uref: 1.0
[       5] sd: True
[       5] sdInfo: {}
[       5] setParamsFunc: None
[       5] set_vos: None
[       5] stencil: [{0}]
[       5] stress: {}
[       5] uL: 0.0
[       5] uR: 1.0
[       5] useMetrics: 1.0
[       5] variableNames: ['vof']
[       5] vectorComponents: None
[       5] vectorName: velocity
[       5] END OF COEFFICIENTS OPTIONS
[       5] L: (1.0, 1.0, 1.0)
[       5] (!) LevelModelType: <class 'proteus.mprans.VOF.LevelModel'>
[       5] T: 1.0
[       5] (!) advectiveFluxBoundaryConditions: {0: <function ParametersModelVOF._initializePhysics.<locals>.<lambda> at 0x14893bdba3b0>}
[       5] analyticalSolution: {}
[       5] boundaryCreatesNullSpace: False
[       5] (!) coefficients: <proteus.mprans.VOF.Coefficients object at 0x14893cdab970>
[       5] (!) diffusiveFluxBoundaryConditions: {0: {}}
[       5] (!) dirichletConditions: {0: <function ParametersModelVOF._initializePhysics.<locals>.<lambda> at 0x14893bdba440>}
[       5] (!) domain: <proteus.Domain.PlanarStraightLineGraphDomain object at 0x14895cd8ace0>
[       5] dummyInitialConditions: False
[       5] finalizeStep: <function finalizeStepDummy at 0x14893dc91240>
[       5] finalizeStepDummy: <function finalizeStepDummy at 0x14893dc91240>
[       5] fluxBoundaryConditions: {}
[       5] genMesh: True
[       5] (!) initialConditions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdab9d0>
[       5] meshfile: None
[       5] movingDomain: False
[       5] (!) name: vof
[       5] (!) nd: 2
[       5] periodicDirichletConditions: None
[       5] polyfile: None
[       5] reload: <function reload at 0x148a1005dd80>
[       5] sd: True
[       5] stressFluxBoundaryConditions: {}
[       5] weakDirichletConditions: None
[       5] x0: (0.0, 0.0, 0.0)
[       5] -----
[       5] vof NUMERICS
[       5] -----
[       5] DT: 1.0
[       5] ShockCapturingOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdab940>
[       5] SubgridErrorOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdaac50>
[       5] adaptMesh: False
[       5] adaptMesh_nSteps: 10
[       5] adaptMesh_numIter: 2
[       5] atol: 1e-08
[       5] atol_res: {0: 0.0001}
[       5] atol_u: {0: 0.0001}
[       5] (!) auxiliaryVariables: [<proteus.Gauges.Gauges object at 0x14893cdaa620>]
[       5] bcsTimeDependent: True
[       5] checkMass: False
[       5] computeEigenvalues: False
[       5] computeEigenvectors: None
[       5] computeLevelLinearSolverRates: False
[       5] computeLinearSmootherRates: False
[       5] computeLinearSolverRates: False
[       5] computeNonlinearLevelSolverRates: False
[       5] computeNonlinearSmootherRates: False
[       5] computeNonlinearSolverRates: True
[       5] conservativeFlux: None
[       5] (!) elementBoundaryQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14893c4bf550>
[       5] (!) elementQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14895cc2b490>
[       5] (!) femSpaces: {0: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>}
[       5] fullNewtonFlag: True
[       5] hex: None
[       5] (!) l_atol_res: 1.6000000000000003e-09
[       5] (!) levelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] levelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] levelNonlinearSolverConvergenceTest: r
[       5] linTolFac: 0.001
[       5] linearPostSmooths: 3
[       5] linearPreSmooths: 3
[       5] linearSmoother: None
[       5] linearSmootherOptions: ()
[       5] (!) linearSolverConvergenceTest: r-true
[       5] linearSolverMaxIts: 1000
[       5] linearWCycles: 3
[       5] (!) linear_solver_options_prefix: vof_
[       5] ltol_u: 0.05
[       5] massLumping: False
[       5] matrix: <class 'superluWrappers.SparseMatrix'>
[       5] maxErrorFailures: 10
[       5] (!) maxLineSearches: 0
[       5] (!) maxNonlinearIts: 50
[       5] maxSolverFailures: 10
[       5] multigridCycles: 2
[       5] (!) multilevelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] (!) multilevelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] nDTout: 1
[       5] nLayersOfOverlapForParallel: 1
[       5] nLevels: 1
[       5] nStagesTime: 1
[       5] name: vof
[       5] needEBQ: False
[       5] needEBQ_GLOBAL: False
[       5] (!) nl_atol_res: 1.6000000000000001e-06
[       5] nltol_u: 0.33
[       5] nn: 3
[       5] nnx: None
[       5] nny: None
[       5] nnz: None
[       5] nonlinearPostSmooths: 3
[       5] nonlinearPreSmooths: 3
[       5] nonlinearSmoother: None
[       5] nonlinearSolverConvergenceTest: r
[       5] nonlinearSolverNorm: <function l2Norm at 0x14894c056290>
[       5] nonlinearWCycles: 3
[       5] (!) numericalFluxType: <class 'proteus.mprans.VOF.NumericalFlux'>
[       5] parallelPartitioningType: 1
[       5] parallelPeriodic: False
[       5] periodicDirichletConditions: None
[       5] postSmooths: 2
[       5] preSmooths: 2
[       5] printLevelLinearSolverInfo: False
[       5] printLinearSmootherInfo: False
[       5] printLinearSolverInfo: False
[       5] printNonlinearLevelSolverInfo: False
[       5] printNonlinearSmootherInfo: False
[       5] printNonlinearSolverInfo: False
[       5] psitc: {'nStepsForce': 3, 'nStepsMax': 100}
[       5] quad: None
[       5] reactionLumping: False
[       5] reload: <function reload at 0x148a1005dd80>
[       5] restrictFineSolutionToAllMeshes: False
[       5] rtol_res: {0: 0.0001}
[       5] rtol_u: {0: 0.0001}
[       5] (!) runCFL: 0.33
[       5] (!) shockCapturing: <proteus.mprans.VOF.ShockCapturing object at 0x14893c4bcdc0>
[       5] (!) stepController: <class 'proteus.StepControl.Min_dt_cfl_controller'>
[       5] (!) subgridError: <proteus.mprans.VOF.SubgridError object at 0x14893c4bd330>
[       5] (!) timeIntegration: <class 'proteus.TimeIntegration.BackwardEuler_cfl'>
[       5] timeIntegrator: <class 'proteus.TimeIntegration.ForwardIntegrator'>
[       5] timeOrder: 1
[       5] (!) tolFac: 0.0
[       5] (!) triangleFlag: 1
[       5] (!) triangleOptions: VApq30Dena0.00080000
[       5] useEisenstatWalker: False
[       5] ----------
[       5] NCLS.ShockCapturing: lagging requested but must lag the first step; switching lagging off and delaying
[       5] TwoPhaseFlow parameters for model: ncls
[       5] -----
[       5] ncls PHYSICS
[       5] -----
[       5] COEFFICIENTS OPTIONS
[       5] COUPEZ: False
[       5] DO_REDISTANCING: False
[       5] DO_SMOOTHING: False
[       5] ENTROPY_TYPE: 1
[       5] LUMPED_MASS_MATRIX: False
[       5] PURE_BDF: False
[       5] RD_modelIndex: 3
[       5] SATURATED_LEVEL_SET: False
[       5] STABILIZATION_TYPE: 0
[       5] advection: {}
[       5] cE: 1.0
[       5] cfl_redistancing: 1.0
[       5] checkMass: False
[       5] diffusion: {}
[       5] elementBoundaryIntegralKeys: [('H', 0), ('u', 0)]
[       5] elementIntegralKeys: [('m', 0), ('H', 0), ('u', 0)]
[       5] epsCoupez: 0.1
[       5] epsFact: 1.5
[       5] epsFactRedistancing: 0.33
[       5] flowModelIndex: 0
[       5] hamiltonian: {0: {0: 'linear'}}
[       5] integrals: {}
[       5] lambda_coupez: 0.1
[       5] mass: {0: {0: 'linear'}}
[       5] maxIter_redistancing: 3
[       5] modelIndex: 2
[       5] movingDomain: False
[       5] nc: 1
[       5] nullSpace: NoNullSpace
[       5] outputQuantDOFs: False
[       5] potential: {}
[       5] pure_redistancing: False
[       5] reaction: {}
[       5] redistancing_tolerance: 0.1
[       5] sc_beta: 1.5
[       5] sc_uref: 1.0
[       5] sd: True
[       5] sdInfo: {}
[       5] stencil: [{0}]
[       5] stress: {}
[       5] useMetrics: 1.0
[       5] variableNames: ['phi']
[       5] vectorComponents: None
[       5] vectorName: velocity
[       5] waterline_interval: -1
[       5] END OF COEFFICIENTS OPTIONS
[       5] L: (1.0, 1.0, 1.0)
[       5] (!) LevelModelType: <class 'proteus.mprans.NCLS.LevelModel'>
[       5] T: 1.0
[       5] advectiveFluxBoundaryConditions: {}
[       5] analyticalSolution: {}
[       5] boundaryCreatesNullSpace: False
[       5] (!) coefficients: <proteus.mprans.NCLS.Coefficients object at 0x14893cdabb50>
[       5] (!) diffusiveFluxBoundaryConditions: {0: {}}
[       5] (!) dirichletConditions: {0: <function ParametersModelNCLS._initializePhysics.<locals>.<lambda> at 0x14893bdba5f0>}
[       5] (!) domain: <proteus.Domain.PlanarStraightLineGraphDomain object at 0x14895cd8ace0>
[       5] dummyInitialConditions: False
[       5] finalizeStep: <function finalizeStepDummy at 0x14893dc91240>
[       5] finalizeStepDummy: <function finalizeStepDummy at 0x14893dc91240>
[       5] fluxBoundaryConditions: {}
[       5] genMesh: True
[       5] (!) initialConditions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdabbe0>
[       5] meshfile: None
[       5] movingDomain: False
[       5] (!) name: ncls
[       5] (!) nd: 2
[       5] periodicDirichletConditions: None
[       5] polyfile: None
[       5] reload: <function reload at 0x148a1005dd80>
[       5] sd: True
[       5] stressFluxBoundaryConditions: {}
[       5] weakDirichletConditions: None
[       5] x0: (0.0, 0.0, 0.0)
[       5] -----
[       5] ncls NUMERICS
[       5] -----
[       5] DT: 1.0
[       5] ShockCapturingOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdabb20>
[       5] SubgridErrorOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cdabaf0>
[       5] adaptMesh: False
[       5] adaptMesh_nSteps: 10
[       5] adaptMesh_numIter: 2
[       5] atol: 1e-08
[       5] atol_res: {0: 0.0001}
[       5] atol_u: {0: 0.0001}
[       5] auxiliaryVariables: []
[       5] bcsTimeDependent: True
[       5] checkMass: False
[       5] computeEigenvalues: False
[       5] computeEigenvectors: None
[       5] computeLevelLinearSolverRates: False
[       5] computeLinearSmootherRates: False
[       5] computeLinearSolverRates: False
[       5] computeNonlinearLevelSolverRates: False
[       5] computeNonlinearSmootherRates: False
[       5] computeNonlinearSolverRates: True
[       5] conservativeFlux: None
[       5] (!) elementBoundaryQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14893c4bf550>
[       5] (!) elementQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14895cc2b490>
[       5] (!) femSpaces: {0: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>}
[       5] fullNewtonFlag: True
[       5] hex: None
[       5] (!) l_atol_res: 1.6000000000000003e-09
[       5] (!) levelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] levelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] levelNonlinearSolverConvergenceTest: r
[       5] linTolFac: 0.001
[       5] linearPostSmooths: 3
[       5] linearPreSmooths: 3
[       5] linearSmoother: None
[       5] linearSmootherOptions: ()
[       5] (!) linearSolverConvergenceTest: r-true
[       5] linearSolverMaxIts: 1000
[       5] linearWCycles: 3
[       5] (!) linear_solver_options_prefix: ncls_
[       5] ltol_u: 0.05
[       5] massLumping: False
[       5] matrix: <class 'superluWrappers.SparseMatrix'>
[       5] maxErrorFailures: 10
[       5] (!) maxLineSearches: 0
[       5] (!) maxNonlinearIts: 50
[       5] maxSolverFailures: 10
[       5] multigridCycles: 2
[       5] (!) multilevelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] (!) multilevelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] nDTout: 1
[       5] nLayersOfOverlapForParallel: 1
[       5] nLevels: 1
[       5] nStagesTime: 1
[       5] name: ncls
[       5] needEBQ: False
[       5] needEBQ_GLOBAL: False
[       5] (!) nl_atol_res: 1.6000000000000001e-06
[       5] nltol_u: 0.33
[       5] nn: 3
[       5] nnx: None
[       5] nny: None
[       5] nnz: None
[       5] nonlinearPostSmooths: 3
[       5] nonlinearPreSmooths: 3
[       5] nonlinearSmoother: None
[       5] nonlinearSolverConvergenceTest: r
[       5] nonlinearSolverNorm: <function l2Norm at 0x14894c056290>
[       5] nonlinearWCycles: 3
[       5] (!) numericalFluxType: <class 'proteus.mprans.NCLS.NumericalFlux'>
[       5] parallelPartitioningType: 1
[       5] parallelPeriodic: False
[       5] periodicDirichletConditions: None
[       5] postSmooths: 2
[       5] preSmooths: 2
[       5] printLevelLinearSolverInfo: False
[       5] printLinearSmootherInfo: False
[       5] printLinearSolverInfo: False
[       5] printNonlinearLevelSolverInfo: False
[       5] printNonlinearSmootherInfo: False
[       5] printNonlinearSolverInfo: False
[       5] psitc: {'nStepsForce': 3, 'nStepsMax': 100}
[       5] quad: None
[       5] reactionLumping: False
[       5] reload: <function reload at 0x148a1005dd80>
[       5] restrictFineSolutionToAllMeshes: False
[       5] rtol_res: {0: 0.0001}
[       5] rtol_u: {0: 0.0001}
[       5] (!) runCFL: 0.33
[       5] (!) shockCapturing: <proteus.mprans.NCLS.ShockCapturing object at 0x14893c4bfbb0>
[       5] (!) stepController: <class 'proteus.StepControl.Min_dt_cfl_controller'>
[       5] (!) subgridError: <proteus.mprans.NCLS.SubgridError object at 0x14893c4bd300>
[       5] (!) timeIntegration: <class 'proteus.TimeIntegration.BackwardEuler_cfl'>
[       5] timeIntegrator: <class 'proteus.TimeIntegration.ForwardIntegrator'>
[       5] timeOrder: 1
[       5] (!) tolFac: 0.0
[       5] (!) triangleFlag: 1
[       5] (!) triangleOptions: VApq30Dena0.00080000
[       5] useEisenstatWalker: False
[       5] ----------
[       5] TwoPhaseFlow parameters for model: rdls
[       5] -----
[       5] rdls PHYSICS
[       5] -----
[       5] COEFFICIENTS OPTIONS
[       5] ELLIPTIC_REDISTANCING: 0
[       5] advection: {}
[       5] alpha: 1000000000.0
[       5] applyRedistancing: True
[       5] backgroundDiffusionFactor: 0.01
[       5] backgroundDissipationEllipticRedist: 1.0
[       5] computeMetrics: False
[       5] copyList: True
[       5] diffusion: {}
[       5] dof_u0: None
[       5] ebq_u0: None
[       5] ebqe_u0: None
[       5] elementBoundaryIntegralKeys: [('H', 0), ('u', 0)]
[       5] elementIntegralKeys: [('m', 0), ('r', 0), ('H', 0), ('u', 0)]
[       5] epsFact: 0.75
[       5] freeze_interface_within_elliptic_redist: False
[       5] hamiltonian: {0: {0: 'nonlinear'}}
[       5] integrals: {}
[       5] mass: {0: {0: 'linear'}}
[       5] movingDomain: False
[       5] nModelId: 2
[       5] nc: 1
[       5] nullSpace: NoNullSpace
[       5] outputQuantDOFs: False
[       5] penaltyParameter: 0.0
[       5] potential: {}
[       5] q_u0: None
[       5] rdModelId: 3
[       5] reaction: {0: {0: 'constant'}}
[       5] sd: True
[       5] sdInfo: {}
[       5] stencil: [{0}]
[       5] stress: {}
[       5] u0: None
[       5] useConstantH: False
[       5] useExact: False
[       5] useMetrics: 1.0
[       5] variableNames: ['phid']
[       5] vectorComponents: None
[       5] vectorName: velocity
[       5] weakBC_on: True
[       5] weakDirichletFactor: 10.0
[       5] END OF COEFFICIENTS OPTIONS
[       5] L: (1.0, 1.0, 1.0)
[       5] (!) LevelModelType: <class 'proteus.mprans.RDLS.LevelModel'>
[       5] T: 1.0
[       5] advectiveFluxBoundaryConditions: {}
[       5] analyticalSolution: {}
[       5] boundaryCreatesNullSpace: False
[       5] (!) coefficients: <proteus.mprans.RDLS.Coefficients object at 0x14893cda81c0>
[       5] (!) diffusiveFluxBoundaryConditions: {0: {}}
[       5] (!) dirichletConditions: {0: <function ParametersModelRDLS._initializePhysics.<locals>.<lambda> at 0x14893bdb9cf0>}
[       5] (!) domain: <proteus.Domain.PlanarStraightLineGraphDomain object at 0x14895cd8ace0>
[       5] dummyInitialConditions: False
[       5] finalizeStep: <function finalizeStepDummy at 0x14893dc91240>
[       5] finalizeStepDummy: <function finalizeStepDummy at 0x14893dc91240>
[       5] fluxBoundaryConditions: {}
[       5] genMesh: True
[       5] (!) initialConditions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cda8250>
[       5] meshfile: None
[       5] movingDomain: False
[       5] (!) name: rdls
[       5] (!) nd: 2
[       5] periodicDirichletConditions: None
[       5] polyfile: None
[       5] reload: <function reload at 0x148a1005dd80>
[       5] sd: True
[       5] stressFluxBoundaryConditions: {}
[       5] (!) weakDirichletConditions: {0: <function setZeroLSweakDirichletBCsSimple at 0x14893bd47640>}
[       5] x0: (0.0, 0.0, 0.0)
[       5] -----
[       5] rdls NUMERICS
[       5] -----
[       5] DT: 1.0
[       5] ShockCapturingOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cda8190>
[       5] SubgridErrorOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cda9180>
[       5] adaptMesh: False
[       5] adaptMesh_nSteps: 10
[       5] adaptMesh_numIter: 2
[       5] atol: 1e-08
[       5] atol_res: {0: 0.0001}
[       5] atol_u: {0: 0.0001}
[       5] auxiliaryVariables: []
[       5] bcsTimeDependent: True
[       5] checkMass: False
[       5] computeEigenvalues: False
[       5] computeEigenvectors: None
[       5] computeLevelLinearSolverRates: False
[       5] computeLinearSmootherRates: False
[       5] computeLinearSolverRates: False
[       5] computeNonlinearLevelSolverRates: False
[       5] computeNonlinearSmootherRates: False
[       5] computeNonlinearSolverRates: True
[       5] conservativeFlux: None
[       5] (!) elementBoundaryQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14893c4bf550>
[       5] (!) elementQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14895cc2b490>
[       5] (!) femSpaces: {0: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>}
[       5] fullNewtonFlag: True
[       5] hex: None
[       5] (!) l_atol_res: 4e-06
[       5] (!) levelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] levelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] levelNonlinearSolverConvergenceTest: r
[       5] linTolFac: 0.001
[       5] linearPostSmooths: 3
[       5] linearPreSmooths: 3
[       5] linearSmoother: None
[       5] linearSmootherOptions: ()
[       5] (!) linearSolverConvergenceTest: r-true
[       5] linearSolverMaxIts: 1000
[       5] linearWCycles: 3
[       5] (!) linear_solver_options_prefix: rdls_
[       5] ltol_u: 0.05
[       5] massLumping: False
[       5] matrix: <class 'superluWrappers.SparseMatrix'>
[       5] maxErrorFailures: 10
[       5] (!) maxLineSearches: 0
[       5] (!) maxNonlinearIts: 50
[       5] maxSolverFailures: 10
[       5] multigridCycles: 2
[       5] (!) multilevelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] (!) multilevelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] nDTout: 1
[       5] nLayersOfOverlapForParallel: 1
[       5] nLevels: 1
[       5] nStagesTime: 1
[       5] name: rdls
[       5] needEBQ: False
[       5] needEBQ_GLOBAL: False
[       5] (!) nl_atol_res: 0.004
[       5] nltol_u: 0.33
[       5] nn: 3
[       5] nnx: None
[       5] nny: None
[       5] nnz: None
[       5] nonlinearPostSmooths: 3
[       5] nonlinearPreSmooths: 3
[       5] (!) nonlinearSmoother: <class 'proteus.NonlinearSolvers.NLGaussSeidel'>
[       5] nonlinearSolverConvergenceTest: r
[       5] nonlinearSolverNorm: <function l2Norm at 0x14894c056290>
[       5] nonlinearWCycles: 3
[       5] (!) numericalFluxType: <class 'proteus.NumericalFlux.DoNothing'>
[       5] parallelPartitioningType: 1
[       5] parallelPeriodic: False
[       5] periodicDirichletConditions: None
[       5] postSmooths: 2
[       5] preSmooths: 2
[       5] printLevelLinearSolverInfo: False
[       5] printLinearSmootherInfo: False
[       5] printLinearSolverInfo: False
[       5] printNonlinearLevelSolverInfo: False
[       5] printNonlinearSmootherInfo: False
[       5] printNonlinearSolverInfo: False
[       5] psitc: {'nStepsForce': 3, 'nStepsMax': 100}
[       5] quad: None
[       5] reactionLumping: False
[       5] reload: <function reload at 0x148a1005dd80>
[       5] restrictFineSolutionToAllMeshes: False
[       5] rtol_res: {0: 0.0001}
[       5] rtol_u: {0: 0.0001}
[       5] (!) runCFL: 0.33
[       5] (!) shockCapturing: <proteus.mprans.RDLS.ShockCapturing object at 0x14893c4bf7c0>
[       5] (!) stepController: <class 'proteus.StepControl.Newton_controller'>
[       5] (!) subgridError: <proteus.mprans.RDLS.SubgridError object at 0x14893c4bf700>
[       5] timeIntegration: <class 'proteus.TimeIntegration.TI_base'>
[       5] timeIntegrator: <class 'proteus.TimeIntegration.ForwardIntegrator'>
[       5] timeOrder: 1
[       5] (!) tolFac: 0.0
[       5] (!) triangleFlag: 1
[       5] (!) triangleOptions: VApq30Dena0.00080000
[       5] useEisenstatWalker: False
[       5] ----------
[       5] TwoPhaseFlow parameters for model: mcorr
[       5] -----
[       5] mcorr PHYSICS
[       5] -----
[       5] COEFFICIENTS OPTIONS
[       5] VOFModelIndex: 1
[       5] advection: {}
[       5] applyCorrection: True
[       5] applyCorrectionToDOF: True
[       5] checkMass: False
[       5] diffusion: {0: {0: {0: 'constant'}}}
[       5] edgeBasedStabilizationMethods: False
[       5] elementBoundaryIntegralKeys: [('a', 0, 0), ('u', 0)]
[       5] elementIntegralKeys: [('a', 0, 0), ('r', 0), ('u', 0)]
[       5] epsFactDiffusion: 10.0
[       5] epsFactDirac: 1.5
[       5] epsFactHeaviside: 1.5
[       5] flowModelIndex: 0
[       5] hamiltonian: {}
[       5] integrals: {}
[       5] levelSetModelIndex: 2
[       5] mass: {}
[       5] massConservationError: 0.0
[       5] me_model: 4
[       5] movingDomain: False
[       5] nc: 1
[       5] nd: 2
[       5] nullSpace: NoNullSpace
[       5] potential: {0: {0: 'u'}}
[       5] reaction: {0: {0: 'nonlinear'}}
[       5] sd: True
[       5] sdInfo: {(0, 0): (array([0, 1, 2], dtype=int32), array([0, 1], dtype=int32))}
[       5] stencil: [{0}]
[       5] stress: {}
[       5] useC: True
[       5] useConstantH: False
[       5] useExact: False
[       5] useMetrics: 1.0
[       5] useQuadraticRegularization: False
[       5] variableNames: ['phiCorr']
[       5] vectorComponents: None
[       5] vectorName: velocity
[       5] END OF COEFFICIENTS OPTIONS
[       5] L: (1.0, 1.0, 1.0)
[       5] (!) LevelModelType: <class 'proteus.mprans.MCorr.LevelModel'>
[       5] T: 1.0
[       5] advectiveFluxBoundaryConditions: {}
[       5] analyticalSolution: {}
[       5] boundaryCreatesNullSpace: False
[       5] (!) coefficients: <proteus.mprans.MCorr.Coefficients object at 0x14893cda89d0>
[       5] diffusiveFluxBoundaryConditions: {}
[       5] dirichletConditions: {}
[       5] (!) domain: <proteus.Domain.PlanarStraightLineGraphDomain object at 0x14895cd8ace0>
[       5] dummyInitialConditions: False
[       5] finalizeStep: <function finalizeStepDummy at 0x14893dc91240>
[       5] finalizeStepDummy: <function finalizeStepDummy at 0x14893dc91240>
[       5] fluxBoundaryConditions: {}
[       5] genMesh: True
[       5] (!) initialConditions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cda8a30>
[       5] meshfile: None
[       5] movingDomain: False
[       5] (!) name: mcorr
[       5] (!) nd: 2
[       5] periodicDirichletConditions: None
[       5] polyfile: None
[       5] reload: <function reload at 0x148a1005dd80>
[       5] sd: True
[       5] stressFluxBoundaryConditions: {}
[       5] weakDirichletConditions: None
[       5] x0: (0.0, 0.0, 0.0)
[       5] -----
[       5] mcorr NUMERICS
[       5] -----
[       5] DT: 1.0
[       5] ShockCapturingOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cda83a0>
[       5] SubgridErrorOptions: <proteus.TwoPhaseFlow.utils.Parameters.FreezableClass object at 0x14893cda82e0>
[       5] adaptMesh: False
[       5] adaptMesh_nSteps: 10
[       5] adaptMesh_numIter: 2
[       5] atol: 1e-08
[       5] atol_res: {0: 0.0001}
[       5] atol_u: {0: 0.0001}
[       5] auxiliaryVariables: []
[       5] bcsTimeDependent: True
[       5] checkMass: False
[       5] computeEigenvalues: False
[       5] computeEigenvectors: None
[       5] computeLevelLinearSolverRates: False
[       5] computeLinearSmootherRates: False
[       5] computeLinearSolverRates: False
[       5] computeNonlinearLevelSolverRates: False
[       5] computeNonlinearSmootherRates: False
[       5] computeNonlinearSolverRates: True
[       5] conservativeFlux: None
[       5] (!) elementBoundaryQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14893c4bf550>
[       5] (!) elementQuadrature: <proteus.Quadrature.SimplexGaussQuadrature object at 0x14895cc2b490>
[       5] (!) femSpaces: {0: <class 'proteus.FemTools.C0_AffineLinearOnSimplexWithNodalBasis'>}
[       5] fullNewtonFlag: True
[       5] hex: None
[       5] (!) l_atol_res: 1.6000000000000002e-10
[       5] (!) levelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] levelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] levelNonlinearSolverConvergenceTest: r
[       5] (!) linTolFac: 0.0
[       5] linearPostSmooths: 3
[       5] linearPreSmooths: 3
[       5] linearSmoother: None
[       5] linearSmootherOptions: ()
[       5] (!) linearSolverConvergenceTest: r-true
[       5] linearSolverMaxIts: 1000
[       5] linearWCycles: 3
[       5] (!) linear_solver_options_prefix: mcorr_
[       5] ltol_u: 0.05
[       5] massLumping: False
[       5] matrix: <class 'superluWrappers.SparseMatrix'>
[       5] maxErrorFailures: 10
[       5] (!) maxLineSearches: 0
[       5] (!) maxNonlinearIts: 50
[       5] maxSolverFailures: 10
[       5] multigridCycles: 2
[       5] (!) multilevelLinearSolver: <class 'proteus.LinearSolvers.KSP_petsc4py'>
[       5] (!) multilevelNonlinearSolver: <class 'proteus.NonlinearSolvers.Newton'>
[       5] nDTout: 1
[       5] nLayersOfOverlapForParallel: 1
[       5] nLevels: 1
[       5] nStagesTime: 1
[       5] name: mcorr
[       5] needEBQ: False
[       5] needEBQ_GLOBAL: False
[       5] (!) nl_atol_res: 1.6e-07
[       5] nltol_u: 0.33
[       5] nn: 3
[       5] nnx: None
[       5] nny: None
[       5] nnz: None
[       5] nonlinearPostSmooths: 3
[       5] nonlinearPreSmooths: 3
[       5] nonlinearSmoother: None
[       5] nonlinearSolverConvergenceTest: r
[       5] nonlinearSolverNorm: <function l2Norm at 0x14894c056290>
[       5] nonlinearWCycles: 3
[       5] (!) numericalFluxType: <class 'proteus.NumericalFlux.DoNothing'>
[       5] parallelPartitioningType: 1
[       5] parallelPeriodic: False
[       5] periodicDirichletConditions: None
[       5] postSmooths: 2
[       5] preSmooths: 2
[       5] printLevelLinearSolverInfo: False
[       5] printLinearSmootherInfo: False
[       5] printLinearSolverInfo: False
[       5] printNonlinearLevelSolverInfo: False
[       5] printNonlinearSmootherInfo: False
[       5] printNonlinearSolverInfo: False
[       5] psitc: {'nStepsForce': 3, 'nStepsMax': 100}
[       5] quad: None
[       5] reactionLumping: False
[       5] reload: <function reload at 0x148a1005dd80>
[       5] restrictFineSolutionToAllMeshes: False
[       5] rtol_res: {0: 0.0001}
[       5] rtol_u: {0: 0.0001}
[       5] (!) runCFL: 0.33
[       5] shockCapturing: None
[       5] (!) stepController: <class 'proteus.StepControl.Min_dt_cfl_controller'>
[       5] subgridError: None
[       5] (!) timeIntegration: <class 'proteus.TimeIntegration.BackwardEuler_cfl'>
[       5] timeIntegrator: <class 'proteus.TimeIntegration.ForwardIntegrator'>
[       5] timeOrder: 1
[       5] (!) tolFac: 0.0
[       5] (!) triangleFlag: 1
[       5] (!) triangleOptions: VApq30Dena0.00080000
[       5] (!) useEisenstatWalker: True
[       5] ----------
[       5] -----
[       5] PETSc OPTIONS
[       5] mcorr_ksp_type: preonly
[       5] mcorr_pc_factor_mat_solver_type: superlu_dist
[       5] mcorr_pc_type: lu
[       5] ncls_ksp_type: preonly
[       5] ncls_pc_factor_mat_solver_type: superlu_dist
[       5] ncls_pc_type: lu
[       5] rans2p_ksp_type: preonly
[       5] rans2p_pc_factor_mat_solver_type: superlu_dist
[       5] rans2p_pc_type: lu
[       5] rdls_ksp_type: preonly
[       5] rdls_pc_factor_mat_solver_type: superlu_dist
[       5] rdls_pc_type: lu
[       5] vof_ksp_type: preonly
[       5] vof_pc_factor_mat_solver_type: superlu_dist
[       5] vof_pc_type: lu
[       5] -----
[       5] Loading p module = rans2p
[       5] Loading n module = rans2p
[       5] Loading p module = vof
[       5] Loading n module = vof
[       5] Loading p module = ncls
[       5] Loading n module = ncls
[       5] Loading p module = rdls
[       5] Loading n module = rdls
[       5] Loading p module = mcorr
[       5] Loading n module = mcorr
[       5] Attaching input stream to stdin
[       5] Running Proteus version 1.8.1
[       5] Setting simulation processing defaults
[       5] Starting cox_flume2DV run number 0
[       5] Initializing NumericalSolution for cox_flume2DV
 System includes: 
rans2p
vof
ncls
rdls
mcorr

[       5] Setting Archiver(s)
[       5] Setting up MultilevelMesh
[       5] Building one multilevel mesh for all models
[       5] Generating mesh for rans2p
[       5] Calling Triangle to generate 2D mesh for DefaultPSLGDomain
[       5] Calling triangle on rank 0 with command triangle -VApq30Dena0.00080000 -e mesh.poly
[       6] Opening mesh.poly.
Constructing Delaunay triangulation by divide-and-conquer method.
  Sorting vertices.
  Forming triangulation.
  Removing ghost triangles.
Delaunay milliseconds:  0
Recovering segments in Delaunay triangulation.
    Constructing mapping from vertices to triangles.
  Recovering PSLG segments.
Segment milliseconds:  0
Removing unwanted triangles.
  Marking concavities (external triangles) for elimination.
  Marking neighbors of marked triangles.
  Deleting marked triangles.
Spreading regional attributes.
Hole milliseconds:  0
Adding Steiner points to enforce quality.
  Looking for encroached subsegments.
  Splitting encroached subsegments.
  Making a list of bad triangles.
  Splitting bad triangles.
Quality milliseconds:  157

Writing mesh.1.node.
Writing mesh.1.ele.
Writing mesh.1.poly.
Writing mesh.1.edge.
Writing mesh.1.neigh.

Output milliseconds:  678
Total running milliseconds:  843

Statistics:

  Input vertices: 67
  Input segments: 96
  Input holes: 0

  Mesh vertices: 160508
  Mesh triangles: 316100
  Mesh edges: 476607
  Mesh exterior boundary edges: 4914
  Mesh interior boundary edges: 14653
  Mesh subsegments (constrained edges): 19567

Mesh quality statistics:

  Smallest area:       0.00013913   |  Largest area:           0.0008
  Shortest edge:         0.015625   |  Longest edge:         0.058962
  Shortest altitude:     0.011303   |  Largest aspect ratio:   3.4611

  Triangle aspect ratio histogram:
  1.1547 - 1.5       :    113826    |     15 - 25         :         0
     1.5 - 2         :    130616    |     25 - 50         :         0
       2 - 2.5       :     62468    |     50 - 100        :         0
     2.5 - 3         :      8601    |    100 - 300        :         0
       3 - 4         :       589    |    300 - 1000       :         0
       4 - 6         :         0    |   1000 - 10000      :         0
       6 - 10        :         0    |  10000 - 100000     :         0
      10 - 15        :         0    | 100000 -            :         0
  (Aspect ratio is longest edge divided by shortest altitude)

  Smallest angle:              30   |  Largest angle:          119.96

  Angle histogram:
      0 -  10 degrees:         0    |     90 - 100 degrees:     29172
     10 -  20 degrees:         0    |    100 - 110 degrees:     11975
     20 -  30 degrees:         0    |    110 - 120 degrees:      1429
     30 -  40 degrees:     92020    |    120 - 130 degrees:         0
     40 -  50 degrees:    201852    |    130 - 140 degrees:         0
     50 -  60 degrees:    233611    |    140 - 150 degrees:         0
     60 -  70 degrees:    194276    |    150 - 160 degrees:         0
     70 -  80 degrees:     89792    |    160 - 170 degrees:         0
     80 -  90 degrees:     94173    |    170 - 180 degrees:         0

Memory allocation statistics:

  Maximum number of vertices: 160508
  Maximum number of triangles: 316100
  Maximum number of subsegments: 19567
  Maximum number of encroached subsegments: 274
  Maximum number of bad triangles: 266513
  Maximum number of stacked triangle flips: 4
  Approximate heap memory use (bytes): 44632344

Algorithmic statistics:

  Number of incircle tests: 1346923
  Number of 2D orientation tests: 869103
  Number of triangle circumcenter computations: 149673


[       6] Done running triangle
[       6] Generating 1-level mesh from coarse Triangle mesh
[       8] Partitioning mesh among 256 processors using partitioningType = 1
[      10] Number of Subdomain Elements Owned= 1247
[      10] Number of Subdomain Elements = 1247
[      10] Number of Subdomain Nodes Owned= 596
[      10] Number of Subdomain Nodes = 676
[      10] Number of Subdomain elementBoundaries Owned= 1843
[      10] Number of Subdomain elementBoundaries = 1922
[      10] Number of Subdomain Edges Owned= 1843
[      10] Number of Subdomain Edges = 1922
[      10] Finished partitioning
[      10] *** Global ***
Number of triangles  : 316100
Number of edges : 476607
Number of nodes : 160508

*** Local ***
Number of triangles  : 1247
Number of edges : 1922
Number of nodes : 676

[      10] Setting up MultilevelTransport for rans2p
[      10] Building Transport for each mesh
[      10] Generating Trial Space
[      10] Generating Test Space
[      11] Allocating u
[      11] Allocating phi
[      11] Setting Boundary Conditions
[      11] Setting Boundary Conditions-1
[      11] Setting Boundary Conditions-2
[      11] Setting Boundary Conditions-2a
[      11] Setting Boundary Conditions-3
[      11] Setting Boundary Conditions-4
[      11] Initializing OneLevelTransport
[      11] Updating local to global mappings
[      11] Building time integration object
[      11] Calculating numerical quadrature formulas
[      11] Element Quadrature
[      11] Element Boundary Quadrature
[      11] Global Exterior Element Boundary Quadrature
[      11] initalizing ebqe vectors for post-procesing velocity
[      11] initalizing basis info
[      11] setting flux boundary conditions
[      11] initializing coefficients ebqe
[      11] ebqe_global allocations in coefficients
[      11] porosity and drag
[      11] done with ebqe
[      11] initalizing numerical flux
[      11] initializing numerical flux penalty
[      11] setting up post-processing
[      11] initializing archiver
[      11] flux bc objects
[      11] dirichlet conditions
[      11] final allocations
[      11] calling cRANS2P2D_base ctor
[      11] WARNING: The boundary fluxes at interpart boundaries are skipped if elementBoundaryMaterialType is 0 for RANS2P-based models. This means that DG methods are currently incompatible with RANS2P.
[      11] Allocating residual and solution vectors
[      11] Allocating Jacobian
[      11] Building sparse matrix structure
[      11] Allocating parallel storage
[      11] Allocating ghosted parallel vectors on rank 0
[      11] Allocating un-ghosted parallel vectors on rank 0
[      11] Allocating matrix on rank 0
[      11] ParMat_petsc4py comm.rank= 0 blockSize = 3 par_n= 596 par_N=160508 par_nghost=80 par_jacobian.getSizes()= ((1788, 481524), (1788, 481524)) 
[      11] Building Mesh Transfers
[      11] Setting rans2p stepController to <class 'proteus.StepControl.Min_dt_cfl_controller'>
[      11] Setting up MultilevelLinearSolver forrans2p
[      11] multilevelLinearSolverChooser type= <class 'proteus.LinearSolvers.KSP_petsc4py'>
[      11] KSP atol 1.600000e-08 rtol 1.000000e-02
[      11] NAHeader Preconditioner SimpleNavierStokes
[      11] Preconditioner options not specified, using defaults
[      11] Setting up MultilevelNonLinearSolver for rans2p
[      11] Setting up MultilevelTransport for vof
[      11] Building Transport for each mesh
[      11] Generating Trial Space
[      11] Generating Test Space
[      11] Allocating u
[      11] Allocating phi
[      11] Setting Boundary Conditions
[      11] Setting Boundary Conditions-1
[      11] Setting Boundary Conditions-2
[      11] Setting Boundary Conditions-2a
[      11] Setting Boundary Conditions-3
[      11] Setting Boundary Conditions-4
[      11] Initializing OneLevelTransport
[      11] Updating local to global mappings
[      11] Building time integration object
[      11] Calculating numerical quadrature formulas
[      11] Element Quadrature
[      11] Element Boundary Quadrature
[      11] Global Exterior Element Boundary Quadrature
[      11] Allocating residual and solution vectors
[      11] Allocating Jacobian
[      11] Building sparse matrix structure
[      11] Allocating parallel storage
[      11] Allocating ghosted parallel vectors on rank 0
[      11] Allocating un-ghosted parallel vectors on rank 0
[      11] Allocating matrix on rank 0
[      11] Transport class has no ParInfo_petsc4py class to store parallel data.
[      11] ParMat_petsc4py comm.rank= 0 blockSize = 1 par_n= 596 par_N=160508 par_nghost=80 par_jacobian.getSizes()= ((596, 160508), (596, 160508)) 
[      11] Building Mesh Transfers
[      11] Setting vof stepController to <class 'proteus.StepControl.Min_dt_cfl_controller'>
[      11] Setting up MultilevelLinearSolver forvof
[      11] multilevelLinearSolverChooser type= <class 'proteus.LinearSolvers.KSP_petsc4py'>
[      11] KSP atol 1.600000e-09 rtol 1.000000e-03
[      11] Setting up MultilevelNonLinearSolver for vof
[      11] Setting up MultilevelTransport for ncls
[      11] Building Transport for each mesh
[      11] Generating Trial Space
[      11] Generating Test Space
[      11] Allocating u
[      11] Allocating phi
[      11] Setting Boundary Conditions
[      11] Setting Boundary Conditions-1
[      11] Setting Boundary Conditions-2
[      11] Setting Boundary Conditions-2a
[      11] Setting Boundary Conditions-3
[      11] Setting Boundary Conditions-4
[      11] Initializing OneLevelTransport
[      11] Updating local to global mappings
[      11] Building time integration object
[      11] Calculating numerical quadrature formulas
[      11] Element Quadrature
[      11] Element Boundary Quadrature
[      11] Global Exterior Element Boundary Quadrature
[      11] Allocating residual and solution vectors
[      11] Allocating Jacobian
[      11] Building sparse matrix structure
[      11] Allocating parallel storage
[      11] Allocating ghosted parallel vectors on rank 0
[      11] Allocating un-ghosted parallel vectors on rank 0
[      11] Allocating matrix on rank 0
[      11] Transport class has no ParInfo_petsc4py class to store parallel data.
[      11] ParMat_petsc4py comm.rank= 0 blockSize = 1 par_n= 596 par_N=160508 par_nghost=80 par_jacobian.getSizes()= ((596, 160508), (596, 160508)) 
[      11] Building Mesh Transfers
[      11] Setting ncls stepController to <class 'proteus.StepControl.Min_dt_cfl_controller'>
[      11] Setting up MultilevelLinearSolver forncls
[      11] multilevelLinearSolverChooser type= <class 'proteus.LinearSolvers.KSP_petsc4py'>
[      11] KSP atol 1.600000e-09 rtol 1.000000e-03
[      11] Setting up MultilevelNonLinearSolver for ncls
[      11] Setting up MultilevelTransport for rdls
[      11] Building Transport for each mesh
[      11] Generating Trial Space
[      11] Generating Test Space
[      11] Allocating u
[      11] Allocating phi
[      11] Setting Boundary Conditions
[      11] Setting Boundary Conditions-1
[      11] Setting Boundary Conditions-2
[      11] Setting Boundary Conditions-2a
[      11] Setting Boundary Conditions-3
[      11] Setting Boundary Conditions-4
[      11] Initializing OneLevelTransport
[      11] Updating local to global mappings
[      11] Building time integration object
[      11] Calculating numerical quadrature formulas
[      11] Element Quadrature
[      11] Element Boundary Quadrature
[      11] Global Exterior Element Boundary Quadrature
[      11] Allocating residual and solution vectors
[      11] Allocating Jacobian
[      11] Building sparse matrix structure
[      11] Allocating parallel storage
[      11] Allocating ghosted parallel vectors on rank 0
[      12] Allocating un-ghosted parallel vectors on rank 0
[      12] Allocating matrix on rank 0
[      12] Transport class has no ParInfo_petsc4py class to store parallel data.
[      12] ParMat_petsc4py comm.rank= 0 blockSize = 1 par_n= 596 par_N=160508 par_nghost=80 par_jacobian.getSizes()= ((596, 160508), (596, 160508)) 
[      12] Building Mesh Transfers
[      12] Setting rdls stepController to <class 'proteus.StepControl.Newton_controller'>
[      12] Setting up MultilevelLinearSolver forrdls
[      12] multilevelLinearSolverChooser type= <class 'proteus.LinearSolvers.KSP_petsc4py'>
[      12] KSP atol 4.000000e-06 rtol 1.000000e-03
[      12] Setting up MultilevelNonLinearSolver for rdls
[      12] Setting up MultilevelTransport for mcorr
[      12] Building Transport for each mesh
[      12] Generating Trial Space
[      12] Generating Test Space
[      12] Allocating u
[      12] Allocating phi
[      12] Setting Boundary Conditions
[      12] Setting Boundary Conditions-1
[      12] Setting Boundary Conditions-2
[      12] Setting Boundary Conditions-2a
[      12] Setting Boundary Conditions-3
[      12] Setting Boundary Conditions-4
[      12] Initializing OneLevelTransport
[      12] Updating local to global mappings
[      12] Building time integration object
[      12] Calculating numerical quadrature formulas
[      12] Element Quadrature
[      12] Element Boundary Quadrature
[      12] Global Exterior Element Boundary Quadrature
[      12] Allocating residual and solution vectors
[      12] Allocating Jacobian
[      12] Building sparse matrix structure
[      12] Allocating parallel storage
[      12] Allocating ghosted parallel vectors on rank 0
[      12] Allocating un-ghosted parallel vectors on rank 0
[      12] Allocating matrix on rank 0
[      12] Transport class has no ParInfo_petsc4py class to store parallel data.
[      12] ParMat_petsc4py comm.rank= 0 blockSize = 1 par_n= 596 par_N=160508 par_nghost=80 par_jacobian.getSizes()= ((596, 160508), (596, 160508)) 
[      12] Building Mesh Transfers
[      12] Setting mcorr stepController to <class 'proteus.StepControl.Min_dt_cfl_controller'>
[      12] Setting up MultilevelLinearSolver formcorr
[      12] multilevelLinearSolverChooser type= <class 'proteus.LinearSolvers.KSP_petsc4py'>
[      12] KSP atol 1.600000e-10 rtol 0.000000e+00
[      12] Setting up MultilevelNonLinearSolver for mcorr
[      12] Finished setting up models and solvers
[      12] Setting up SimTools for mcorr
[      12] Gauges on element at location: [21.91 1.64 0] assigned to 44
[      12] Gauges on element at location: [25.57 1.64 0] assigned to 7
[      12] Gauges on element at location: [29.12 1.62 0] assigned to 228
[      12] Gauges on element at location: [32.89 1.63 0] assigned to 30
[      12] Gauges on element at location: [36.54 1.63 0] assigned to 164
[      12] Gauges on element at location: [40.21 1.63 0] assigned to 168
[      12] Gauges on element at location: [18.26 1.25 0] assigned to 52
[      12] Gauges on element at location: [29.11 1.4 0] assigned to 228
[      12] Gauges on element at location: [29.11 1.55 0] assigned to 228
[      12] Gauges on element at location: [29.11 1.72 0] assigned to 228
[      12] Gauges on element at location: [29.11 1.86 0] assigned to 228
[      12] Gauges on element at location: [43.85 1.38 0] assigned to 176
[      12] Segmented line [[11.38  0.85  0.  ]
 [11.38  3.    0.  ]] different from original length by ratio 5.010906e-05
 segments: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [array([[11.38      ,  1.9803606 ,  0.        ],
       [11.38      ,  1.99859744,  0.        ]]), array([[11.38      ,  1.99859744,  0.        ],
       [11.38      ,  2.01284219,  0.        ]]), array([[11.38      ,  2.01284219,  0.        ],
       [11.38      ,  2.01582028,  0.        ]]), array([[11.38      ,  2.01582028,  0.        ],
       [11.38      ,  2.03800296,  0.        ]]), array([[11.38      ,  2.03800296,  0.        ],
       [11.38      ,  2.05311252,  0.        ]]), array([[11.38      ,  2.05311252,  0.        ],
       [11.38      ,  2.07011989,  0.        ]]), array([[11.38      ,  2.07011989,  0.        ],
       [11.38      ,  2.09216197,  0.        ]]), array([[11.38      ,  2.09216197,  0.        ],
       [11.38      ,  2.11530019,  0.        ]]), array([[11.38      ,  2.11530019,  0.        ],
       [11.38      ,  2.12932146,  0.        ]]), array([[11.38      ,  2.12932146,  0.        ],
       [11.38      ,  2.14798307,  0.        ]]), array([[11.38      ,  2.14798307,  0.        ],
       [11.38      ,  2.16862984,  0.        ]]), array([[11.38      ,  2.16862984,  0.        ],
       [11.38      ,  2.17897649,  0.        ]]), array([[11.38      ,  2.17897649,  0.        ],
       [11.38      ,  2.2010967 ,  0.        ]]), array([[11.38      ,  2.2010967 ,  0.        ],
       [11.38      ,  2.21900584,  0.        ]]), array([[11.38      ,  2.21900584,  0.        ],
       [11.38      ,  2.23906268,  0.        ]]), array([[11.38      ,  2.23906268,  0.        ],
       [11.38      ,  2.2418677 ,  0.        ]]), array([[11.38      ,  2.2418677 ,  0.        ],
       [11.38      ,  2.27041388,  0.        ]]), array([[11.38      ,  2.27041388,  0.        ],
       [11.38      ,  2.28247016,  0.        ]]), array([[11.38      ,  2.28247016,  0.        ],
       [11.38      ,  2.30504108,  0.        ]]), array([[11.38      ,  2.30504108,  0.        ],
       [11.38      ,  2.33337732,  0.        ]]), array([[11.38      ,  2.33348506,  0.        ],
       [11.38      ,  2.33565369,  0.        ]]), array([[11.38      ,  2.33565369,  0.        ],
       [11.38      ,  2.35846219,  0.        ]]), array([[11.38      ,  2.35846219,  0.        ],
       [11.38      ,  2.35938464,  0.        ]]), array([[11.38      ,  2.35938464,  0.        ],
       [11.38      ,  2.36485776,  0.        ]]), array([[11.38      ,  2.36485776,  0.        ],
       [11.38      ,  2.41132948,  0.        ]]), array([[11.38      ,  2.41132948,  0.        ],
       [11.38      ,  2.4222645 ,  0.        ]]), array([[11.38      ,  2.4222645 ,  0.        ],
       [11.38      ,  2.43673516,  0.        ]]), array([[11.38      ,  2.43673516,  0.        ],
       [11.38      ,  2.45107201,  0.        ]]), array([[11.38      ,  2.45107201,  0.        ],
       [11.38      ,  2.45917145,  0.        ]]), array([[11.38      ,  2.45917145,  0.        ],
       [11.38      ,  2.46411209,  0.        ]]), array([[11.38      ,  2.46411209,  0.        ],
       [11.38      ,  2.47503722,  0.        ]]), array([[11.38      ,  2.47503722,  0.        ],
       [11.38      ,  2.49738037,  0.        ]]), array([[11.38      ,  2.49738037,  0.        ],
       [11.38      ,  2.51053618,  0.        ]]), array([[11.38      ,  2.51053618,  0.        ],
       [11.38      ,  2.52841136,  0.        ]]), array([[11.38      ,  2.52841136,  0.        ],
       [11.38      ,  2.54763903,  0.        ]]), array([[11.38      ,  2.54763903,  0.        ],
       [11.38      ,  2.55791561,  0.        ]]), array([[11.38      ,  2.55791561,  0.        ],
       [11.38      ,  2.56616714,  0.        ]]), array([[11.38      ,  2.56616714,  0.        ],
       [11.38      ,  2.60503076,  0.        ]]), array([[11.38      ,  2.60503076,  0.        ],
       [11.38      ,  2.60736559,  0.        ]]), array([[11.38      ,  2.60736559,  0.        ],
       [11.38      ,  2.60818676,  0.        ]]), array([[11.38      ,  2.60818676,  0.        ],
       [11.38      ,  2.64001776,  0.        ]]), array([[11.38      ,  2.64001776,  0.        ],
       [11.38      ,  2.65699791,  0.        ]]), array([[11.38      ,  2.65699791,  0.        ],
       [11.38      ,  2.66987983,  0.        ]]), array([[11.38      ,  2.66987983,  0.        ],
       [11.38      ,  2.68939779,  0.        ]]), array([[11.38      ,  2.68939779,  0.        ],
       [11.38      ,  2.71365029,  0.        ]]), array([[11.38      ,  2.71365029,  0.        ],
       [11.38      ,  2.71890082,  0.        ]]), array([[11.38      ,  2.71890082,  0.        ],
       [11.38      ,  2.7288541 ,  0.        ]]), array([[11.38     ,  2.7288541,  0.       ],
       [11.38     ,  2.7503577,  0.       ]]), array([[11.38      ,  2.7503577 ,  0.        ],
       [11.38      ,  2.76342928,  0.        ]]), array([[11.38      ,  2.76342928,  0.        ],
       [11.38      ,  2.78570241,  0.        ]]), array([[11.38      ,  2.78570241,  0.        ],
       [11.38      ,  2.79724138,  0.        ]]), array([[11.38      ,  2.79724138,  0.        ],
       [11.38      ,  2.82203464,  0.        ]]), array([[11.38      ,  2.82203464,  0.        ],
       [11.38      ,  2.84162837,  0.        ]]), array([[11.38      ,  2.84162837,  0.        ],
       [11.38      ,  2.85134939,  0.        ]]), array([[11.38      ,  2.85134939,  0.        ],
       [11.38      ,  2.87001368,  0.        ]]), array([[11.38      ,  2.87001368,  0.        ],
       [11.38      ,  2.8885812 ,  0.        ]]), array([[11.38      ,  2.8885812 ,  0.        ],
       [11.38      ,  2.89126339,  0.        ]]), array([[11.38      ,  2.89126339,  0.        ],
       [11.38      ,  2.89981848,  0.        ]]), array([[11.38      ,  2.89981848,  0.        ],
       [11.38      ,  2.92036521,  0.        ]]), array([[11.38      ,  2.92036521,  0.        ],
       [11.38      ,  2.92950255,  0.        ]]), array([[11.38      ,  2.92950255,  0.        ],
       [11.38      ,  2.94946818,  0.        ]]), array([[11.38      ,  2.94946818,  0.        ],
       [11.38      ,  2.96606056,  0.        ]]), array([[11.38      ,  2.96606056,  0.        ],
       [11.38      ,  2.9851578 ,  0.        ]]), array([[11.38     ,  2.9851578,  0.       ],
       [11.38     ,  3.       ,  0.       ]])], [], [], [array([[11.38      ,  0.85      ,  0.        ],
       [11.38      ,  0.86239755,  0.        ]]), array([[11.38      ,  0.86239755,  0.        ],
       [11.38      ,  0.87736317,  0.        ]]), array([[11.38      ,  0.87736317,  0.        ],
       [11.38      ,  0.89904325,  0.        ]]), array([[11.38      ,  0.89904325,  0.        ],
       [11.38      ,  0.90942757,  0.        ]]), array([[11.38      ,  0.90942757,  0.        ],
       [11.38      ,  0.92882023,  0.        ]]), array([[11.38      ,  0.92882023,  0.        ],
       [11.38      ,  0.944562  ,  0.        ]]), array([[11.38      ,  0.944562  ,  0.        ],
       [11.38      ,  0.95943756,  0.        ]]), array([[11.38      ,  0.95943756,  0.        ],
       [11.38      ,  0.9732799 ,  0.        ]]), array([[11.38      ,  0.9732799 ,  0.        ],
       [11.38      ,  0.99350964,  0.        ]]), array([[11.38      ,  0.99350964,  0.        ],
       [11.38      ,  1.01526485,  0.        ]]), array([[11.38      ,  1.01526485,  0.        ],
       [11.38      ,  1.02048538,  0.        ]]), array([[11.38      ,  1.02048538,  0.        ],
       [11.38      ,  1.02918778,  0.        ]]), array([[11.38      ,  1.02918778,  0.        ],
       [11.38      ,  1.04970928,  0.        ]]), array([[11.38      ,  1.04970928,  0.        ],
       [11.38      ,  1.05605787,  0.        ]]), array([[11.38      ,  1.05605787,  0.        ],
       [11.38      ,  1.07713633,  0.        ]]), array([[11.38      ,  1.07713633,  0.        ],
       [11.38      ,  1.08055458,  0.        ]]), array([[11.38      ,  1.08055458,  0.        ],
       [11.38      ,  1.10230164,  0.        ]]), array([[11.38      ,  1.10230164,  0.        ],
       [11.38      ,  1.12290707,  0.        ]]), array([[11.38      ,  1.12290707,  0.        ],
       [11.38      ,  1.13077472,  0.        ]]), array([[11.38      ,  1.13077472,  0.        ],
       [11.38      ,  1.14034287,  0.        ]]), array([[11.38      ,  1.14034287,  0.        ],
       [11.38      ,  1.16434239,  0.        ]]), array([[11.38      ,  1.16434239,  0.        ],
       [11.38      ,  1.18116246,  0.        ]]), array([[11.38      ,  1.18116246,  0.        ],
       [11.38      ,  1.19159297,  0.        ]]), array([[11.38      ,  1.19159297,  0.        ],
       [11.38      ,  1.21102667,  0.        ]]), array([[11.38      ,  1.21102667,  0.        ],
       [11.38      ,  1.2280846 ,  0.        ]]), array([[11.38      ,  1.2280846 ,  0.        ],
       [11.38      ,  1.24413548,  0.        ]]), array([[11.38      ,  1.24413548,  0.        ],
       [11.38      ,  1.26552255,  0.        ]]), array([[11.38      ,  1.26552255,  0.        ],
       [11.38      ,  1.27679556,  0.        ]]), array([[11.38      ,  1.27679556,  0.        ],
       [11.38      ,  1.28998186,  0.        ]]), array([[11.38      ,  1.28998186,  0.        ],
       [11.38      ,  1.30263882,  0.        ]]), array([[11.38      ,  1.30263882,  0.        ],
       [11.38      ,  1.30967918,  0.        ]]), array([[11.38      ,  1.30967918,  0.        ],
       [11.38      ,  1.32657227,  0.        ]]), array([[11.38      ,  1.32657227,  0.        ],
       [11.38      ,  1.33928019,  0.        ]]), array([[11.38      ,  1.33928019,  0.        ],
       [11.38      ,  1.35973525,  0.        ]]), array([[11.38      ,  1.35973525,  0.        ],
       [11.38      ,  1.37185675,  0.        ]]), array([[11.38      ,  1.37185675,  0.        ],
       [11.38      ,  1.39970459,  0.        ]]), array([[11.38      ,  1.39970459,  0.        ],
       [11.38      ,  1.40404617,  0.        ]]), array([[11.38      ,  1.40404617,  0.        ],
       [11.38      ,  1.4065099 ,  0.        ]]), array([[11.38      ,  1.4065099 ,  0.        ],
       [11.38      ,  1.43395633,  0.        ]]), array([[11.38      ,  1.43395633,  0.        ],
       [11.38      ,  1.44394099,  0.        ]]), array([[11.38      ,  1.44394099,  0.        ],
       [11.38      ,  1.45987187,  0.        ]]), array([[11.38      ,  1.45987187,  0.        ],
       [11.38      ,  1.479785  ,  0.        ]]), array([[11.38      ,  1.479785  ,  0.        ],
       [11.38      ,  1.49086456,  0.        ]]), array([[11.38      ,  1.49086456,  0.        ],
       [11.38      ,  1.515414  ,  0.        ]]), array([[11.38      ,  1.515414  ,  0.        ],
       [11.38      ,  1.51822245,  0.        ]]), array([[11.38      ,  1.51822245,  0.        ],
       [11.38      ,  1.51909667,  0.        ]]), array([[11.38      ,  1.51909667,  0.        ],
       [11.38      ,  1.53220948,  0.        ]]), array([[11.38      ,  1.53220948,  0.        ],
       [11.38      ,  1.55372397,  0.        ]]), array([[11.38      ,  1.55372397,  0.        ],
       [11.38      ,  1.55636538,  0.        ]]), array([[11.38      ,  1.55636538,  0.        ],
       [11.38      ,  1.58567388,  0.        ]]), array([[11.38      ,  1.58567388,  0.        ],
       [11.38      ,  1.58861901,  0.        ]]), array([[11.38      ,  1.58861901,  0.        ],
       [11.38      ,  1.61307022,  0.        ]]), array([[11.38      ,  1.61307022,  0.        ],
       [11.38      ,  1.62564852,  0.        ]]), array([[11.38      ,  1.62564852,  0.        ],
       [11.38      ,  1.66001123,  0.        ]]), array([[11.38      ,  1.66001123,  0.        ],
       [11.38      ,  1.66341607,  0.        ]]), array([[11.38      ,  1.66341607,  0.        ],
       [11.38      ,  1.68635009,  0.        ]]), array([[11.38      ,  1.68635009,  0.        ],
       [11.38      ,  1.69671123,  0.        ]]), array([[11.38      ,  1.69671123,  0.        ],
       [11.38      ,  1.7237841 ,  0.        ]]), array([[11.38      ,  1.7237841 ,  0.        ],
       [11.38      ,  1.73467446,  0.        ]]), array([[11.38      ,  1.73467446,  0.        ],
       [11.38      ,  1.75409068,  0.        ]]), array([[11.38      ,  1.75409068,  0.        ],
       [11.38      ,  1.77467463,  0.        ]]), array([[11.38      ,  1.77467463,  0.        ],
       [11.38      ,  1.78954331,  0.        ]]), array([[11.38      ,  1.78954331,  0.        ],
       [11.38      ,  1.79726535,  0.        ]]), array([[11.38      ,  1.79726535,  0.        ],
       [11.38      ,  1.80168682,  0.        ]]), array([[11.38      ,  1.80168682,  0.        ],
       [11.38      ,  1.82186226,  0.        ]]), array([[11.38      ,  1.82186226,  0.        ],
       [11.38      ,  1.82386162,  0.        ]]), array([[11.38      ,  1.82386162,  0.        ],
       [11.38      ,  1.82443208,  0.        ]]), array([[11.38      ,  1.82443208,  0.        ],
       [11.38      ,  1.82869318,  0.        ]]), array([[11.38      ,  1.82869318,  0.        ],
       [11.38      ,  1.87298218,  0.        ]]), array([[11.38      ,  1.87298218,  0.        ],
       [11.38      ,  1.87887895,  0.        ]]), array([[11.38      ,  1.87887895,  0.        ],
       [11.38      ,  1.89722819,  0.        ]]), array([[11.38      ,  1.89722819,  0.        ],
       [11.38      ,  1.90576192,  0.        ]]), array([[11.38      ,  1.90576192,  0.        ],
       [11.38      ,  1.92499653,  0.        ]]), array([[11.38      ,  1.92499653,  0.        ],
       [11.38      ,  1.93479373,  0.        ]]), array([[11.38      ,  1.93479373,  0.        ],
       [11.38      ,  1.93647053,  0.        ]]), array([[11.38      ,  1.93647053,  0.        ],
       [11.38      ,  1.9482876 ,  0.        ]]), array([[11.38      ,  1.9482876 ,  0.        ],
       [11.38      ,  1.97633624,  0.        ]]), array([[11.38      ,  1.97633624,  0.        ],
       [11.38      ,  1.9803606 ,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      12] Segmented line [[14.7   0.85  0.  ]
 [14.7   3.    0.  ]] different from original length by ratio 3.822344e-05
 segments: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [array([[14.7       ,  0.85      ,  0.        ],
       [14.7       ,  0.86110601,  0.        ]]), array([[14.7       ,  0.86110601,  0.        ],
       [14.7       ,  0.87597168,  0.        ]]), array([[14.7       ,  0.87597168,  0.        ],
       [14.7       ,  0.88800434,  0.        ]]), array([[14.7       ,  0.88800434,  0.        ],
       [14.7       ,  0.90057989,  0.        ]]), array([[14.7       ,  0.90057989,  0.        ],
       [14.7       ,  0.92370654,  0.        ]]), array([[14.7       ,  0.92370654,  0.        ],
       [14.7       ,  0.93206019,  0.        ]]), array([[14.7       ,  0.93206019,  0.        ],
       [14.7       ,  0.93587477,  0.        ]]), array([[14.7       ,  0.93587477,  0.        ],
       [14.7       ,  0.94428175,  0.        ]]), array([[14.7       ,  0.94428175,  0.        ],
       [14.7       ,  0.96425641,  0.        ]]), array([[14.7       ,  0.96425641,  0.        ],
       [14.7       ,  0.98244769,  0.        ]]), array([[14.7       ,  0.98244769,  0.        ],
       [14.7       ,  0.99887422,  0.        ]]), array([[14.7       ,  0.99887422,  0.        ],
       [14.7       ,  1.01404562,  0.        ]]), array([[14.7       ,  1.01404562,  0.        ],
       [14.7       ,  1.0311917 ,  0.        ]]), array([[14.7       ,  1.0311917 ,  0.        ],
       [14.7       ,  1.05320584,  0.        ]]), array([[14.7       ,  1.05320584,  0.        ],
       [14.7       ,  1.06113116,  0.        ]]), array([[14.7       ,  1.06113116,  0.        ],
       [14.7       ,  1.0791074 ,  0.        ]]), array([[14.7       ,  1.0791074 ,  0.        ],
       [14.7       ,  1.09572065,  0.        ]]), array([[14.7       ,  1.09572065,  0.        ],
       [14.7       ,  1.11180295,  0.        ]]), array([[14.7       ,  1.11180295,  0.        ],
       [14.7       ,  1.1201483 ,  0.        ]]), array([[14.7       ,  1.1201483 ,  0.        ],
       [14.7       ,  1.14896049,  0.        ]]), array([[14.7       ,  1.14896049,  0.        ],
       [14.7       ,  1.15865095,  0.        ]]), array([[14.7       ,  1.15865095,  0.        ],
       [14.7       ,  1.18347898,  0.        ]]), array([[14.7       ,  1.18347898,  0.        ],
       [14.7       ,  1.1887451 ,  0.        ]]), array([[14.7       ,  1.1887451 ,  0.        ],
       [14.7       ,  1.19090202,  0.        ]]), array([[14.7       ,  1.19090202,  0.        ],
       [14.7       ,  1.21258114,  0.        ]]), array([[14.7       ,  1.21258114,  0.        ],
       [14.7       ,  1.23481251,  0.        ]]), array([[14.7       ,  1.23481251,  0.        ],
       [14.7       ,  1.23761556,  0.        ]]), array([[14.7       ,  1.23761556,  0.        ],
       [14.7       ,  1.24341082,  0.        ]]), array([[14.7       ,  1.24341082,  0.        ],
       [14.7       ,  1.26692485,  0.        ]]), array([[14.7       ,  1.26692485,  0.        ],
       [14.7       ,  1.27821561,  0.        ]]), array([[14.7       ,  1.27821561,  0.        ],
       [14.7       ,  1.30198372,  0.        ]]), array([[14.7       ,  1.30198372,  0.        ],
       [14.7       ,  1.32064175,  0.        ]]), array([[14.7       ,  1.32064175,  0.        ],
       [14.7       ,  1.33771788,  0.        ]]), array([[14.7       ,  1.33771788,  0.        ],
       [14.7       ,  1.35094975,  0.        ]]), array([[14.7       ,  1.35094975,  0.        ],
       [14.7       ,  1.37191781,  0.        ]]), array([[14.7       ,  1.37191781,  0.        ],
       [14.7       ,  1.38640421,  0.        ]]), array([[14.7       ,  1.38640421,  0.        ],
       [14.7       ,  1.39897782,  0.        ]]), array([[14.7       ,  1.39897782,  0.        ],
       [14.7       ,  1.42798638,  0.        ]]), array([[14.7       ,  1.42798638,  0.        ],
       [14.7       ,  1.43155936,  0.        ]]), array([[14.7       ,  1.43155936,  0.        ],
       [14.7       ,  1.43392958,  0.        ]]), array([[14.7       ,  1.43392958,  0.        ],
       [14.7       ,  1.46267335,  0.        ]]), array([[14.7       ,  1.46267335,  0.        ],
       [14.7       ,  1.47945334,  0.        ]]), array([[14.7       ,  1.47945334,  0.        ],
       [14.7       ,  1.49316853,  0.        ]]), array([[14.7       ,  1.49316853,  0.        ],
       [14.7       ,  1.50361188,  0.        ]]), array([[14.7       ,  1.50361188,  0.        ],
       [14.7       ,  1.52209037,  0.        ]]), array([[14.7       ,  1.52209037,  0.        ],
       [14.7       ,  1.53687081,  0.        ]]), array([[14.7       ,  1.53687081,  0.        ],
       [14.7       ,  1.55369319,  0.        ]]), array([[14.7       ,  1.55369319,  0.        ],
       [14.7       ,  1.58517868,  0.        ]]), array([[14.7       ,  1.58517868,  0.        ],
       [14.7       ,  1.59452781,  0.        ]]), array([[14.7       ,  1.59452781,  0.        ],
       [14.7       ,  1.59890201,  0.        ]]), array([[14.7       ,  1.59890201,  0.        ],
       [14.7       ,  1.61470905,  0.        ]]), array([[14.7       ,  1.61470905,  0.        ],
       [14.7       ,  1.63109458,  0.        ]]), array([[14.7       ,  1.63109458,  0.        ],
       [14.7       ,  1.64414443,  0.        ]]), array([[14.7       ,  1.64414443,  0.        ],
       [14.7       ,  1.65692471,  0.        ]])], [array([[14.7       ,  2.30438641,  0.        ],
       [14.7       ,  2.31335225,  0.        ]]), array([[14.7       ,  2.31335225,  0.        ],
       [14.7       ,  2.33412732,  0.        ]]), array([[14.7       ,  2.33412732,  0.        ],
       [14.7       ,  2.35507472,  0.        ]]), array([[14.7       ,  2.35507472,  0.        ],
       [14.7       ,  2.3655006 ,  0.        ]]), array([[14.7       ,  2.3655006 ,  0.        ],
       [14.7       ,  2.38733134,  0.        ]]), array([[14.7       ,  2.38733134,  0.        ],
       [14.7       ,  2.40357103,  0.        ]]), array([[14.7       ,  2.40357103,  0.        ],
       [14.7       ,  2.42138621,  0.        ]]), array([[14.7       ,  2.42138621,  0.        ],
       [14.7       ,  2.44310448,  0.        ]]), array([[14.7       ,  2.44310448,  0.        ],
       [14.7       ,  2.44518376,  0.        ]]), array([[14.7       ,  2.44518376,  0.        ],
       [14.7       ,  2.47156586,  0.        ]]), array([[14.7       ,  2.47156586,  0.        ],
       [14.7       ,  2.47558547,  0.        ]]), array([[14.7       ,  2.47558547,  0.        ],
       [14.7       ,  2.50422886,  0.        ]]), array([[14.7       ,  2.50422886,  0.        ],
       [14.7       ,  2.53698016,  0.        ]]), array([[14.7       ,  2.53698016,  0.        ],
       [14.7       ,  2.54677627,  0.        ]]), array([[14.7       ,  2.54677627,  0.        ],
       [14.7       ,  2.55119066,  0.        ]]), array([[14.7       ,  2.55119066,  0.        ],
       [14.7       ,  2.57626915,  0.        ]]), array([[14.7       ,  2.57626915,  0.        ],
       [14.7       ,  2.57802534,  0.        ]]), array([[14.7       ,  2.57802534,  0.        ],
       [14.7       ,  2.61605296,  0.        ]]), array([[14.7       ,  2.61605296,  0.        ],
       [14.7       ,  2.62311971,  0.        ]]), array([[14.7       ,  2.62311971,  0.        ],
       [14.7       ,  2.63195519,  0.        ]]), array([[14.7       ,  2.63195519,  0.        ],
       [14.7       ,  2.6499861 ,  0.        ]]), array([[14.7       ,  2.6499861 ,  0.        ],
       [14.7       ,  2.67661047,  0.        ]]), array([[14.7       ,  2.67661047,  0.        ],
       [14.7       ,  2.68161232,  0.        ]]), array([[14.7       ,  2.68161232,  0.        ],
       [14.7       ,  2.68499881,  0.        ]]), array([[14.7       ,  2.68499881,  0.        ],
       [14.7       ,  2.71351338,  0.        ]]), array([[14.7       ,  2.71351338,  0.        ],
       [14.7       ,  2.72988822,  0.        ]]), array([[14.7       ,  2.72988822,  0.        ],
       [14.7       ,  2.75924231,  0.        ]]), array([[14.7       ,  2.75924231,  0.        ],
       [14.7       ,  2.7596812 ,  0.        ]]), array([[14.7      ,  2.7596812,  0.       ],
       [14.7      ,  2.7605348,  0.       ]]), array([[14.7       ,  2.7605348 ,  0.        ],
       [14.7       ,  2.79269716,  0.        ]]), array([[14.7       ,  2.79269716,  0.        ],
       [14.7       ,  2.81961906,  0.        ]]), array([[14.7       ,  2.81961906,  0.        ],
       [14.7       ,  2.82533586,  0.        ]]), array([[14.7       ,  2.82533586,  0.        ],
       [14.7       ,  2.82795277,  0.        ]]), array([[14.7       ,  2.82795277,  0.        ],
       [14.7       ,  2.86203408,  0.        ]]), array([[14.7       ,  2.86203408,  0.        ],
       [14.7       ,  2.8834752 ,  0.        ]]), array([[14.7       ,  2.8834752 ,  0.        ],
       [14.7       ,  2.89741058,  0.        ]]), array([[14.7       ,  2.89741058,  0.        ],
       [14.7       ,  2.90509699,  0.        ]]), array([[14.7       ,  2.90509699,  0.        ],
       [14.7       ,  2.92516798,  0.        ]]), array([[14.7       ,  2.92516798,  0.        ],
       [14.7       ,  2.93713556,  0.        ]]), array([[14.7       ,  2.93713556,  0.        ],
       [14.7       ,  2.95141565,  0.        ]]), array([[14.7       ,  2.95141565,  0.        ],
       [14.7       ,  2.97624442,  0.        ]]), array([[14.7       ,  2.97624442,  0.        ],
       [14.7       ,  2.97744936,  0.        ]]), array([[14.7       ,  2.97744936,  0.        ],
       [14.7       ,  3.        ,  0.        ]])], [], [], [], [array([[14.7       ,  1.65692471,  0.        ],
       [14.7       ,  1.67374525,  0.        ]]), array([[14.7       ,  1.67374525,  0.        ],
       [14.7       ,  1.69388665,  0.        ]]), array([[14.7       ,  1.69388665,  0.        ],
       [14.7       ,  1.70160428,  0.        ]]), array([[14.7       ,  1.70160428,  0.        ],
       [14.7       ,  1.71191133,  0.        ]]), array([[14.7       ,  1.71191133,  0.        ],
       [14.7       ,  1.72335506,  0.        ]]), array([[14.7       ,  1.72335506,  0.        ],
       [14.7       ,  1.73670321,  0.        ]]), array([[14.7       ,  1.73670321,  0.        ],
       [14.7       ,  1.74842842,  0.        ]]), array([[14.7       ,  1.74842842,  0.        ],
       [14.7       ,  1.75326349,  0.        ]]), array([[14.7       ,  1.75326349,  0.        ],
       [14.7       ,  1.77610227,  0.        ]]), array([[14.7       ,  1.77610227,  0.        ],
       [14.7       ,  1.78590124,  0.        ]]), array([[14.7       ,  1.78590124,  0.        ],
       [14.7       ,  1.80414245,  0.        ]]), array([[14.7       ,  1.80414245,  0.        ],
       [14.7       ,  1.8214529 ,  0.        ]]), array([[14.7       ,  1.8214529 ,  0.        ],
       [14.7       ,  1.83587625,  0.        ]]), array([[14.7       ,  1.83587625,  0.        ],
       [14.7       ,  1.85907878,  0.        ]]), array([[14.7       ,  1.85907878,  0.        ],
       [14.7       ,  1.86548945,  0.        ]]), array([[14.7       ,  1.86548945,  0.        ],
       [14.7       ,  1.89146569,  0.        ]]), array([[14.7       ,  1.89146569,  0.        ],
       [14.7       ,  1.89189985,  0.        ]]), array([[14.7       ,  1.89189985,  0.        ],
       [14.7       ,  1.89510704,  0.        ]]), array([[14.7       ,  1.89510704,  0.        ],
       [14.7       ,  1.92183968,  0.        ]]), array([[14.7       ,  1.92183968,  0.        ],
       [14.7       ,  1.92934926,  0.        ]]), array([[14.7       ,  1.92934926,  0.        ],
       [14.7       ,  1.95468712,  0.        ]]), array([[14.7       ,  1.95468712,  0.        ],
       [14.7       ,  1.96612625,  0.        ]]), array([[14.7       ,  1.96612625,  0.        ],
       [14.7       ,  1.98426888,  0.        ]]), array([[14.7       ,  1.98426888,  0.        ],
       [14.7       ,  2.00913809,  0.        ]]), array([[14.7       ,  2.00913809,  0.        ],
       [14.7       ,  2.01472487,  0.        ]]), array([[14.7       ,  2.01472487,  0.        ],
       [14.7       ,  2.0207405 ,  0.        ]]), array([[14.7       ,  2.0207405 ,  0.        ],
       [14.7       ,  2.04256775,  0.        ]]), array([[14.7       ,  2.04256775,  0.        ],
       [14.7       ,  2.06514329,  0.        ]]), array([[14.7       ,  2.06522547,  0.        ],
       [14.7       ,  2.08819977,  0.        ]]), array([[14.7       ,  2.08819977,  0.        ],
       [14.7       ,  2.10550052,  0.        ]]), array([[14.7       ,  2.10550052,  0.        ],
       [14.7       ,  2.12100007,  0.        ]]), array([[14.7       ,  2.12100007,  0.        ],
       [14.7       ,  2.14082755,  0.        ]]), array([[14.7       ,  2.14082755,  0.        ],
       [14.7       ,  2.15206415,  0.        ]]), array([[14.7       ,  2.15206415,  0.        ],
       [14.7       ,  2.17356885,  0.        ]]), array([[14.7       ,  2.17356885,  0.        ],
       [14.7       ,  2.17963055,  0.        ]]), array([[14.7       ,  2.17963055,  0.        ],
       [14.7       ,  2.19589479,  0.        ]]), array([[14.7       ,  2.19589479,  0.        ],
       [14.7       ,  2.20639245,  0.        ]]), array([[14.7       ,  2.20639245,  0.        ],
       [14.7       ,  2.2141245 ,  0.        ]]), array([[14.7       ,  2.2141245 ,  0.        ],
       [14.7       ,  2.22435356,  0.        ]]), array([[14.7       ,  2.22435356,  0.        ],
       [14.7       ,  2.24385584,  0.        ]]), array([[14.7       ,  2.24385584,  0.        ],
       [14.7       ,  2.26916172,  0.        ]]), array([[14.7       ,  2.26916172,  0.        ],
       [14.7       ,  2.27266838,  0.        ]]), array([[14.7       ,  2.27266838,  0.        ],
       [14.7       ,  2.28156347,  0.        ]]), array([[14.7       ,  2.28156347,  0.        ],
       [14.7       ,  2.30438641,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      12] Segmented line [[16.54  0.85  0.  ]
 [16.54  3.    0.  ]] different from original length by ratio 6.009852e-05
 segments: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [array([[16.54      ,  0.85      ,  0.        ],
       [16.54      ,  0.88133256,  0.        ]]), array([[16.54      ,  0.88133256,  0.        ],
       [16.54      ,  0.88343584,  0.        ]]), array([[16.54      ,  0.88343584,  0.        ],
       [16.54      ,  0.90049554,  0.        ]]), array([[16.54      ,  0.90049554,  0.        ],
       [16.54      ,  0.91462543,  0.        ]]), array([[16.54      ,  0.91462543,  0.        ],
       [16.54      ,  0.91652826,  0.        ]]), array([[16.54      ,  0.91652826,  0.        ],
       [16.54      ,  0.94186812,  0.        ]]), array([[16.54      ,  0.94186812,  0.        ],
       [16.54      ,  0.96365842,  0.        ]]), array([[16.54      ,  0.96365842,  0.        ],
       [16.54      ,  0.96978943,  0.        ]]), array([[16.54      ,  0.96978943,  0.        ],
       [16.54      ,  0.97492183,  0.        ]]), array([[16.54      ,  0.97492183,  0.        ],
       [16.54      ,  0.99577965,  0.        ]]), array([[16.54      ,  0.99577965,  0.        ],
       [16.54      ,  1.03262699,  0.        ]]), array([[16.54      ,  1.03262699,  0.        ],
       [16.54      ,  1.03690105,  0.        ]]), array([[16.54      ,  1.03690105,  0.        ],
       [16.54      ,  1.03829227,  0.        ]]), array([[16.54      ,  1.03829227,  0.        ],
       [16.54      ,  1.04067122,  0.        ]]), array([[16.54      ,  1.04067122,  0.        ],
       [16.54      ,  1.06713778,  0.        ]]), array([[16.54      ,  1.06713778,  0.        ],
       [16.54      ,  1.10332774,  0.        ]]), array([[16.54      ,  1.10332774,  0.        ],
       [16.54      ,  1.11041696,  0.        ]]), array([[16.54      ,  1.11041696,  0.        ],
       [16.54      ,  1.11563122,  0.        ]]), array([[16.54      ,  1.11563122,  0.        ],
       [16.54      ,  1.14737264,  0.        ]]), array([[16.54      ,  1.14737264,  0.        ],
       [16.54      ,  1.15565325,  0.        ]]), array([[16.54      ,  1.15565325,  0.        ],
       [16.54      ,  1.15767929,  0.        ]]), array([[16.54      ,  1.15767929,  0.        ],
       [16.54      ,  1.18530675,  0.        ]]), array([[16.54      ,  1.18530675,  0.        ],
       [16.54      ,  1.20277997,  0.        ]]), array([[16.54      ,  1.20277997,  0.        ],
       [16.54      ,  1.21348168,  0.        ]]), array([[16.54      ,  1.21348168,  0.        ],
       [16.54      ,  1.21680229,  0.        ]]), array([[16.54      ,  1.21680229,  0.        ],
       [16.54      ,  1.22284716,  0.        ]]), array([[16.54      ,  1.22284716,  0.        ],
       [16.54      ,  1.24406829,  0.        ]]), array([[16.54      ,  1.24406829,  0.        ],
       [16.54      ,  1.26832182,  0.        ]]), array([[16.54      ,  1.26832182,  0.        ],
       [16.54      ,  1.28143014,  0.        ]]), array([[16.54      ,  1.28143014,  0.        ],
       [16.54      ,  1.28807333,  0.        ]]), array([[16.54      ,  1.28807333,  0.        ],
       [16.54      ,  1.32025373,  0.        ]]), array([[16.54      ,  1.32025373,  0.        ],
       [16.54      ,  1.32207432,  0.        ]]), array([[16.54      ,  1.32207432,  0.        ],
       [16.54      ,  1.35227831,  0.        ]]), array([[16.54      ,  1.35240753,  0.        ],
       [16.54      ,  1.38325502,  0.        ]]), array([[16.54      ,  1.38325502,  0.        ],
       [16.54      ,  1.40950376,  0.        ]]), array([[16.54      ,  1.40950376,  0.        ],
       [16.54      ,  1.41736031,  0.        ]]), array([[16.54      ,  1.41736031,  0.        ],
       [16.54      ,  1.42466594,  0.        ]]), array([[16.54      ,  1.42466594,  0.        ],
       [16.54      ,  1.46095436,  0.        ]]), array([[16.54      ,  1.46095436,  0.        ],
       [16.54      ,  1.4856332 ,  0.        ]]), array([[16.54      ,  1.4856332 ,  0.        ],
       [16.54      ,  1.49004168,  0.        ]]), array([[16.54      ,  1.49004168,  0.        ],
       [16.54      ,  1.49179669,  0.        ]]), array([[16.54      ,  1.49179669,  0.        ],
       [16.54      ,  1.50159594,  0.        ]]), array([[16.54      ,  1.50159594,  0.        ],
       [16.54      ,  1.53380699,  0.        ]]), array([[16.54      ,  1.53380699,  0.        ],
       [16.54      ,  1.54211265,  0.        ]]), array([[16.54      ,  1.54211265,  0.        ],
       [16.54      ,  1.57585299,  0.        ]]), array([[16.54      ,  1.57585299,  0.        ],
       [16.54      ,  1.58201489,  0.        ]]), array([[16.54      ,  1.58201489,  0.        ],
       [16.54      ,  1.58834413,  0.        ]]), array([[16.54      ,  1.58834413,  0.        ],
       [16.54      ,  1.61486302,  0.        ]]), array([[16.54      ,  1.61486302,  0.        ],
       [16.54      ,  1.63165904,  0.        ]]), array([[16.54      ,  1.63165904,  0.        ],
       [16.54      ,  1.64331892,  0.        ]]), array([[16.54      ,  1.64331892,  0.        ],
       [16.54      ,  1.66421074,  0.        ]]), array([[16.54      ,  1.66421074,  0.        ],
       [16.54      ,  1.66931974,  0.        ]]), array([[16.54      ,  1.66931974,  0.        ],
       [16.54      ,  1.69910973,  0.        ]]), array([[16.54      ,  1.69910973,  0.        ],
       [16.54      ,  1.70941635,  0.        ]]), array([[16.54      ,  1.70941635,  0.        ],
       [16.54      ,  1.7411078 ,  0.        ]]), array([[16.54     ,  1.7411078,  0.       ],
       [16.54     ,  1.7444562,  0.       ]]), array([[16.54      ,  1.7444562 ,  0.        ],
       [16.54      ,  1.74542637,  0.        ]]), array([[16.54      ,  1.74542637,  0.        ],
       [16.54      ,  1.74793761,  0.        ]]), array([[16.54      ,  1.74793761,  0.        ],
       [16.54      ,  1.77949574,  0.        ]]), array([[16.54      ,  1.77949574,  0.        ],
       [16.54      ,  1.79624676,  0.        ]]), array([[16.54      ,  1.79624676,  0.        ],
       [16.54      ,  1.8184068 ,  0.        ]]), array([[16.54      ,  1.8184068 ,  0.        ],
       [16.54      ,  1.82597563,  0.        ]])], [array([[16.54      ,  1.82597563,  0.        ],
       [16.54      ,  1.8505183 ,  0.        ]]), array([[16.54      ,  1.8505183 ,  0.        ],
       [16.54      ,  1.86001524,  0.        ]]), array([[16.54      ,  1.86001524,  0.        ],
       [16.54      ,  1.86326641,  0.        ]]), array([[16.54      ,  1.86326641,  0.        ],
       [16.54      ,  1.9032738 ,  0.        ]]), array([[16.54      ,  1.9032738 ,  0.        ],
       [16.54      ,  1.90436441,  0.        ]]), array([[16.54      ,  1.90436441,  0.        ],
       [16.54      ,  1.90566299,  0.        ]]), array([[16.54      ,  1.90566299,  0.        ],
       [16.54      ,  1.93153344,  0.        ]]), array([[16.54      ,  1.93153344,  0.        ],
       [16.54      ,  1.93888554,  0.        ]]), array([[16.54      ,  1.93888554,  0.        ],
       [16.54      ,  1.95670647,  0.        ]]), array([[16.54      ,  1.95670647,  0.        ],
       [16.54      ,  1.98366976,  0.        ]]), array([[16.54      ,  1.98366976,  0.        ],
       [16.54      ,  1.98482344,  0.        ]]), array([[16.54      ,  1.98482344,  0.        ],
       [16.54      ,  2.01988785,  0.        ]]), array([[16.54      ,  2.01988785,  0.        ],
       [16.54      ,  2.03206069,  0.        ]]), array([[16.54      ,  2.03206069,  0.        ],
       [16.54      ,  2.05719256,  0.        ]]), array([[16.54      ,  2.05719256,  0.        ],
       [16.54      ,  2.06771602,  0.        ]]), array([[16.54      ,  2.06771602,  0.        ],
       [16.54      ,  2.09753911,  0.        ]]), array([[16.54      ,  2.09753911,  0.        ],
       [16.54      ,  2.10353306,  0.        ]]), array([[16.54      ,  2.10353306,  0.        ],
       [16.54      ,  2.10576864,  0.        ]]), array([[16.54      ,  2.10576864,  0.        ],
       [16.54      ,  2.13242367,  0.        ]]), array([[16.54      ,  2.13242367,  0.        ],
       [16.54      ,  2.16284486,  0.        ]]), array([[16.54      ,  2.16284486,  0.        ],
       [16.54      ,  2.16479597,  0.        ]]), array([[16.54      ,  2.16479597,  0.        ],
       [16.54      ,  2.16564474,  0.        ]]), array([[16.54      ,  2.16564474,  0.        ],
       [16.54      ,  2.16729875,  0.        ]]), array([[16.54      ,  2.16729875,  0.        ],
       [16.54      ,  2.19721111,  0.        ]]), array([[16.54      ,  2.19721111,  0.        ],
       [16.54      ,  2.20826194,  0.        ]]), array([[16.54      ,  2.20826194,  0.        ],
       [16.54      ,  2.23879725,  0.        ]]), array([[16.54      ,  2.23879725,  0.        ],
       [16.54      ,  2.26945285,  0.        ]]), array([[16.54      ,  2.26945285,  0.        ],
       [16.54      ,  2.27083564,  0.        ]]), array([[16.54      ,  2.27083564,  0.        ],
       [16.54      ,  2.2942048 ,  0.        ]]), array([[16.54      ,  2.2942048 ,  0.        ],
       [16.54      ,  2.31248647,  0.        ]]), array([[16.54      ,  2.31248647,  0.        ],
       [16.54      ,  2.31332753,  0.        ]]), array([[16.54      ,  2.31332753,  0.        ],
       [16.54      ,  2.3424062 ,  0.        ]]), array([[16.54      ,  2.3424062 ,  0.        ],
       [16.54      ,  2.35686547,  0.        ]]), array([[16.54      ,  2.35686547,  0.        ],
       [16.54      ,  2.37263324,  0.        ]])], [], [array([[16.54      ,  2.37263324,  0.        ],
       [16.54      ,  2.39855582,  0.        ]]), array([[16.54      ,  2.39855582,  0.        ],
       [16.54      ,  2.4065154 ,  0.        ]]), array([[16.54     ,  2.4065154,  0.       ],
       [16.54     ,  2.4105988,  0.       ]]), array([[16.54      ,  2.4105988 ,  0.        ],
       [16.54      ,  2.43841339,  0.        ]]), array([[16.54      ,  2.43841339,  0.        ],
       [16.54      ,  2.44962582,  0.        ]]), array([[16.54      ,  2.44962582,  0.        ],
       [16.54      ,  2.47008599,  0.        ]]), array([[16.54      ,  2.47008599,  0.        ],
       [16.54      ,  2.4944327 ,  0.        ]]), array([[16.54      ,  2.4944327 ,  0.        ],
       [16.54      ,  2.49915729,  0.        ]]), array([[16.54      ,  2.49915729,  0.        ],
       [16.54      ,  2.53463075,  0.        ]]), array([[16.54      ,  2.53463075,  0.        ],
       [16.54      ,  2.53989817,  0.        ]]), array([[16.54      ,  2.53989817,  0.        ],
       [16.54      ,  2.54778328,  0.        ]]), array([[16.54      ,  2.54778328,  0.        ],
       [16.54      ,  2.56284377,  0.        ]]), array([[16.54      ,  2.56284377,  0.        ],
       [16.54      ,  2.57647475,  0.        ]]), array([[16.54      ,  2.57647475,  0.        ],
       [16.54      ,  2.59350018,  0.        ]]), array([[16.54      ,  2.59350018,  0.        ],
       [16.54      ,  2.60886324,  0.        ]]), array([[16.54      ,  2.60886324,  0.        ],
       [16.54      ,  2.61958124,  0.        ]]), array([[16.54      ,  2.61958124,  0.        ],
       [16.54      ,  2.62752996,  0.        ]]), array([[16.54      ,  2.62752996,  0.        ],
       [16.54      ,  2.6489762 ,  0.        ]]), array([[16.54      ,  2.6489762 ,  0.        ],
       [16.54      ,  2.66280418,  0.        ]]), array([[16.54      ,  2.66280418,  0.        ],
       [16.54      ,  2.67715725,  0.        ]]), array([[16.54      ,  2.67715725,  0.        ],
       [16.54      ,  2.68651322,  0.        ]]), array([[16.54      ,  2.68651322,  0.        ],
       [16.54      ,  2.7130038 ,  0.        ]]), array([[16.54      ,  2.7130038 ,  0.        ],
       [16.54      ,  2.72395364,  0.        ]]), array([[16.54      ,  2.72395364,  0.        ],
       [16.54      ,  2.73440385,  0.        ]]), array([[16.54      ,  2.73440385,  0.        ],
       [16.54      ,  2.76499912,  0.        ]]), array([[16.54      ,  2.76499912,  0.        ],
       [16.54      ,  2.77300363,  0.        ]]), array([[16.54      ,  2.77300363,  0.        ],
       [16.54      ,  2.80018911,  0.        ]]), array([[16.54      ,  2.80018911,  0.        ],
       [16.54      ,  2.82032078,  0.        ]]), array([[16.54      ,  2.82032078,  0.        ],
       [16.54      ,  2.82746008,  0.        ]]), array([[16.54      ,  2.82746008,  0.        ],
       [16.54      ,  2.84943459,  0.        ]]), array([[16.54      ,  2.84943459,  0.        ],
       [16.54      ,  2.85253947,  0.        ]]), array([[16.54      ,  2.85253947,  0.        ],
       [16.54      ,  2.85310751,  0.        ]]), array([[16.54      ,  2.85310751,  0.        ],
       [16.54      ,  2.85450846,  0.        ]]), array([[16.54      ,  2.85450846,  0.        ],
       [16.54      ,  2.88195221,  0.        ]]), array([[16.54      ,  2.88195221,  0.        ],
       [16.54      ,  2.89278623,  0.        ]]), array([[16.54      ,  2.89278623,  0.        ],
       [16.54      ,  2.92430812,  0.        ]]), array([[16.54      ,  2.92430812,  0.        ],
       [16.54      ,  2.92721216,  0.        ]]), array([[16.54      ,  2.92721216,  0.        ],
       [16.54      ,  2.9296263 ,  0.        ]]), array([[16.54      ,  2.9296263 ,  0.        ],
       [16.54      ,  2.93520674,  0.        ]]), array([[16.54      ,  2.93520674,  0.        ],
       [16.54      ,  2.97207388,  0.        ]]), array([[16.54      ,  2.97207388,  0.        ],
       [16.54      ,  2.99936196,  0.        ]]), array([[16.54      ,  2.99936196,  0.        ],
       [16.54      ,  3.        ,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      13] Segmented line [[17.46  0.85  0.  ]
 [17.46  3.    0.  ]] different from original length by ratio 4.119699e-05
 segments: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [array([[17.46      ,  1.4760202 ,  0.        ],
       [17.46      ,  1.48037591,  0.        ]]), array([[17.46      ,  1.48037591,  0.        ],
       [17.46      ,  1.50468861,  0.        ]]), array([[17.46      ,  1.50468861,  0.        ],
       [17.46      ,  1.5091007 ,  0.        ]]), array([[17.46      ,  1.5091007 ,  0.        ],
       [17.46      ,  1.51854838,  0.        ]]), array([[17.46      ,  1.51854838,  0.        ],
       [17.46      ,  1.53937347,  0.        ]]), array([[17.46      ,  1.53937347,  0.        ],
       [17.46      ,  1.54675517,  0.        ]]), array([[17.46      ,  1.54675517,  0.        ],
       [17.46      ,  1.57186149,  0.        ]]), array([[17.46      ,  1.57186149,  0.        ],
       [17.46      ,  1.58372791,  0.        ]]), array([[17.46      ,  1.58372791,  0.        ],
       [17.46      ,  1.59382862,  0.        ]]), array([[17.46      ,  1.59382862,  0.        ],
       [17.46      ,  1.61427915,  0.        ]]), array([[17.46      ,  1.61427915,  0.        ],
       [17.46      ,  1.65556139,  0.        ]]), array([[17.46      ,  1.65564996,  0.        ],
       [17.46      ,  1.65648547,  0.        ]]), array([[17.46      ,  1.65648547,  0.        ],
       [17.46      ,  1.68317632,  0.        ]]), array([[17.46      ,  1.68317632,  0.        ],
       [17.46      ,  1.68466641,  0.        ]]), array([[17.46      ,  1.68466641,  0.        ],
       [17.46      ,  1.71521351,  0.        ]]), array([[17.46      ,  1.71521351,  0.        ],
       [17.46      ,  1.73942315,  0.        ]]), array([[17.46      ,  1.73942315,  0.        ],
       [17.46      ,  1.74892851,  0.        ]]), array([[17.46      ,  1.74892851,  0.        ],
       [17.46      ,  1.76555812,  0.        ]]), array([[17.46      ,  1.76555812,  0.        ],
       [17.46      ,  1.79027337,  0.        ]]), array([[17.46      ,  1.79027337,  0.        ],
       [17.46      ,  1.79260236,  0.        ]]), array([[17.46      ,  1.79260236,  0.        ],
       [17.46      ,  1.81124925,  0.        ]]), array([[17.46      ,  1.81124925,  0.        ],
       [17.46      ,  1.83616422,  0.        ]]), array([[17.46      ,  1.83616422,  0.        ],
       [17.46      ,  1.83892209,  0.        ]]), array([[17.46      ,  1.83892209,  0.        ],
       [17.46      ,  1.86728437,  0.        ]]), array([[17.46      ,  1.86728437,  0.        ],
       [17.46      ,  1.87188294,  0.        ]]), array([[17.46      ,  1.87188294,  0.        ],
       [17.46      ,  1.89082766,  0.        ]]), array([[17.46      ,  1.89082766,  0.        ],
       [17.46      ,  1.89864844,  0.        ]]), array([[17.46      ,  1.89864844,  0.        ],
       [17.46      ,  1.92641589,  0.        ]]), array([[17.46      ,  1.92641589,  0.        ],
       [17.46      ,  1.93296006,  0.        ]]), array([[17.46      ,  1.93296006,  0.        ],
       [17.46      ,  1.95932091,  0.        ]]), array([[17.46      ,  1.95932091,  0.        ],
       [17.46      ,  1.96088238,  0.        ]]), array([[17.46      ,  1.96088238,  0.        ],
       [17.46      ,  1.96674539,  0.        ]]), array([[17.46      ,  1.96674539,  0.        ],
       [17.46      ,  1.99024026,  0.        ]]), array([[17.46      ,  1.99024026,  0.        ],
       [17.46      ,  2.00910442,  0.        ]]), array([[17.46      ,  2.00910442,  0.        ],
       [17.46      ,  2.02170265,  0.        ]]), array([[17.46      ,  2.02170265,  0.        ],
       [17.46      ,  2.03609922,  0.        ]]), array([[17.46      ,  2.03609922,  0.        ],
       [17.46      ,  2.04965649,  0.        ]]), array([[17.46      ,  2.04965649,  0.        ],
       [17.46      ,  2.06131887,  0.        ]]), array([[17.46      ,  2.06131887,  0.        ],
       [17.46      ,  2.08683465,  0.        ]]), array([[17.46      ,  2.08683465,  0.        ],
       [17.46      ,  2.10684095,  0.        ]]), array([[17.46      ,  2.10684095,  0.        ],
       [17.46      ,  2.1290296 ,  0.        ]]), array([[17.46      ,  2.1290296 ,  0.        ],
       [17.46      ,  2.14201189,  0.        ]]), array([[17.46      ,  2.14201189,  0.        ],
       [17.46      ,  2.16426746,  0.        ]]), array([[17.46      ,  2.16426746,  0.        ],
       [17.46      ,  2.17006978,  0.        ]]), array([[17.46      ,  2.17006978,  0.        ],
       [17.46      ,  2.17355864,  0.        ]]), array([[17.46      ,  2.17355864,  0.        ],
       [17.46      ,  2.20135423,  0.        ]]), array([[17.46      ,  2.20135423,  0.        ],
       [17.46      ,  2.21664357,  0.        ]]), array([[17.46      ,  2.21664357,  0.        ],
       [17.46      ,  2.23093413,  0.        ]]), array([[17.46      ,  2.23093413,  0.        ],
       [17.46      ,  2.2470336 ,  0.        ]]), array([[17.46      ,  2.2470336 ,  0.        ],
       [17.46      ,  2.26958386,  0.        ]]), array([[17.46      ,  2.26958386,  0.        ],
       [17.46      ,  2.27717989,  0.        ]])], [array([[17.46      ,  2.27717989,  0.        ],
       [17.46      ,  2.28784768,  0.        ]]), array([[17.46      ,  2.28784768,  0.        ],
       [17.46      ,  2.30117748,  0.        ]]), array([[17.46      ,  2.30117748,  0.        ],
       [17.46      ,  2.30803948,  0.        ]]), array([[17.46      ,  2.30803948,  0.        ],
       [17.46      ,  2.32792156,  0.        ]]), array([[17.46      ,  2.32792156,  0.        ],
       [17.46      ,  2.33992149,  0.        ]]), array([[17.46      ,  2.33992149,  0.        ],
       [17.46      ,  2.35173198,  0.        ]]), array([[17.46      ,  2.35173198,  0.        ],
       [17.46      ,  2.37842722,  0.        ]]), array([[17.46      ,  2.37842722,  0.        ],
       [17.46      ,  2.38720363,  0.        ]]), array([[17.46      ,  2.38720363,  0.        ],
       [17.46      ,  2.39499442,  0.        ]]), array([[17.46      ,  2.39499442,  0.        ],
       [17.46      ,  2.41140706,  0.        ]]), array([[17.46      ,  2.41140706,  0.        ],
       [17.46      ,  2.43826711,  0.        ]]), array([[17.46      ,  2.43826711,  0.        ],
       [17.46      ,  2.44258091,  0.        ]]), array([[17.46      ,  2.44258091,  0.        ],
       [17.46      ,  2.44523326,  0.        ]]), array([[17.46      ,  2.44523326,  0.        ],
       [17.46      ,  2.47582329,  0.        ]]), array([[17.46      ,  2.47582329,  0.        ],
       [17.46      ,  2.49052074,  0.        ]]), array([[17.46      ,  2.49052074,  0.        ],
       [17.46      ,  2.50570835,  0.        ]]), array([[17.46      ,  2.50570835,  0.        ],
       [17.46      ,  2.52381578,  0.        ]]), array([[17.46      ,  2.52381578,  0.        ],
       [17.46      ,  2.55552614,  0.        ]]), array([[17.46      ,  2.55552614,  0.        ],
       [17.46      ,  2.58322475,  0.        ]]), array([[17.46      ,  2.58322475,  0.        ],
       [17.46      ,  2.58592993,  0.        ]]), array([[17.46      ,  2.58592993,  0.        ],
       [17.46      ,  2.58711333,  0.        ]]), array([[17.46      ,  2.58711333,  0.        ],
       [17.46      ,  2.59419587,  0.        ]]), array([[17.46      ,  2.59419587,  0.        ],
       [17.46      ,  2.6213359 ,  0.        ]]), array([[17.46      ,  2.6213359 ,  0.        ],
       [17.46      ,  2.62952375,  0.        ]]), array([[17.46      ,  2.62952375,  0.        ],
       [17.46      ,  2.65590229,  0.        ]]), array([[17.46      ,  2.65590229,  0.        ],
       [17.46      ,  2.68000979,  0.        ]]), array([[17.46      ,  2.68000979,  0.        ],
       [17.46      ,  2.69386636,  0.        ]]), array([[17.46      ,  2.69386636,  0.        ],
       [17.46      ,  2.71459429,  0.        ]]), array([[17.46      ,  2.71459429,  0.        ],
       [17.46      ,  2.73441249,  0.        ]]), array([[17.46      ,  2.73441249,  0.        ],
       [17.46      ,  2.75408138,  0.        ]]), array([[17.46      ,  2.75408138,  0.        ],
       [17.46      ,  2.75630981,  0.        ]]), array([[17.46      ,  2.75630981,  0.        ],
       [17.46      ,  2.78649956,  0.        ]]), array([[17.46      ,  2.78649956,  0.        ],
       [17.46      ,  2.79227471,  0.        ]]), array([[17.46      ,  2.79227471,  0.        ],
       [17.46      ,  2.81234661,  0.        ]]), array([[17.46      ,  2.81234661,  0.        ],
       [17.46      ,  2.828396  ,  0.        ]]), array([[17.46      ,  2.828396  ,  0.        ],
       [17.46      ,  2.83204134,  0.        ]]), array([[17.46      ,  2.83204134,  0.        ],
       [17.46      ,  2.83965079,  0.        ]]), array([[17.46      ,  2.83965079,  0.        ],
       [17.46      ,  2.85889443,  0.        ]]), array([[17.46      ,  2.85889443,  0.        ],
       [17.46      ,  2.87234773,  0.        ]]), array([[17.46      ,  2.87234773,  0.        ],
       [17.46      ,  2.8941243 ,  0.        ]]), array([[17.46      ,  2.8941243 ,  0.        ],
       [17.46      ,  2.90616847,  0.        ]]), array([[17.46      ,  2.90616847,  0.        ],
       [17.46      ,  2.92343374,  0.        ]]), array([[17.46      ,  2.92343374,  0.        ],
       [17.46      ,  2.94094743,  0.        ]]), array([[17.46      ,  2.94094743,  0.        ],
       [17.46      ,  2.96378639,  0.        ]]), array([[17.46      ,  2.96378639,  0.        ],
       [17.46      ,  2.97147122,  0.        ]]), array([[17.46      ,  2.97147122,  0.        ],
       [17.46      ,  2.98513481,  0.        ]]), array([[17.46      ,  2.98513481,  0.        ],
       [17.46      ,  3.        ,  0.        ]])], [array([[17.46      ,  0.85      ,  0.        ],
       [17.46      ,  0.87914417,  0.        ]]), array([[17.46      ,  0.87914417,  0.        ],
       [17.46      ,  0.88698264,  0.        ]]), array([[17.46      ,  0.88698264,  0.        ],
       [17.46      ,  0.88899458,  0.        ]]), array([[17.46      ,  0.88899458,  0.        ],
       [17.46      ,  0.89089437,  0.        ]]), array([[17.46      ,  0.89089437,  0.        ],
       [17.46      ,  0.9166173 ,  0.        ]]), array([[17.46      ,  0.9166173 ,  0.        ],
       [17.46      ,  0.93604534,  0.        ]]), array([[17.46      ,  0.93604534,  0.        ],
       [17.46      ,  0.94425471,  0.        ]]), array([[17.46      ,  0.94425471,  0.        ],
       [17.46      ,  0.96627557,  0.        ]]), array([[17.46      ,  0.96627557,  0.        ],
       [17.46      ,  0.96950829,  0.        ]]), array([[17.46      ,  0.96950829,  0.        ],
       [17.46      ,  0.97118976,  0.        ]]), array([[17.46      ,  0.97118976,  0.        ],
       [17.46      ,  0.99361937,  0.        ]]), array([[17.46      ,  0.99361937,  0.        ],
       [17.46      ,  0.99868033,  0.        ]]), array([[17.46      ,  0.99868033,  0.        ],
       [17.46      ,  1.02318123,  0.        ]]), array([[17.46      ,  1.02318123,  0.        ],
       [17.46      ,  1.02390841,  0.        ]]), array([[17.46      ,  1.02390841,  0.        ],
       [17.46      ,  1.02493542,  0.        ]]), array([[17.46      ,  1.02493542,  0.        ],
       [17.46      ,  1.05084154,  0.        ]]), array([[17.46      ,  1.05084154,  0.        ],
       [17.46      ,  1.06942839,  0.        ]]), array([[17.46      ,  1.06942839,  0.        ],
       [17.46      ,  1.0742319 ,  0.        ]]), array([[17.46      ,  1.0742319 ,  0.        ],
       [17.46      ,  1.09946167,  0.        ]]), array([[17.46      ,  1.09946167,  0.        ],
       [17.46      ,  1.12088387,  0.        ]]), array([[17.46      ,  1.12088387,  0.        ],
       [17.46      ,  1.12561295,  0.        ]]), array([[17.46      ,  1.12561295,  0.        ],
       [17.46      ,  1.14195827,  0.        ]]), array([[17.46      ,  1.14195827,  0.        ],
       [17.46      ,  1.15689201,  0.        ]]), array([[17.46      ,  1.15689201,  0.        ],
       [17.46      ,  1.1662639 ,  0.        ]]), array([[17.46      ,  1.1662639 ,  0.        ],
       [17.46      ,  1.18294529,  0.        ]]), array([[17.46      ,  1.18294529,  0.        ],
       [17.46      ,  1.19562825,  0.        ]]), array([[17.46      ,  1.19562825,  0.        ],
       [17.46      ,  1.21341786,  0.        ]]), array([[17.46      ,  1.21341786,  0.        ],
       [17.46      ,  1.21431494,  0.        ]]), array([[17.46      ,  1.21431494,  0.        ],
       [17.46      ,  1.21862078,  0.        ]]), array([[17.46      ,  1.21862078,  0.        ],
       [17.46      ,  1.23905109,  0.        ]]), array([[17.46      ,  1.23905109,  0.        ],
       [17.46      ,  1.2443007 ,  0.        ]]), array([[17.46      ,  1.2443007 ,  0.        ],
       [17.46      ,  1.25834556,  0.        ]]), array([[17.46      ,  1.25834556,  0.        ],
       [17.46      ,  1.27584983,  0.        ]]), array([[17.46      ,  1.27584983,  0.        ],
       [17.46      ,  1.29139291,  0.        ]]), array([[17.46      ,  1.29139291,  0.        ],
       [17.46      ,  1.31572805,  0.        ]]), array([[17.46      ,  1.31572805,  0.        ],
       [17.46      ,  1.32602878,  0.        ]]), array([[17.46      ,  1.32602878,  0.        ],
       [17.46      ,  1.35208071,  0.        ]]), array([[17.46      ,  1.35208071,  0.        ],
       [17.46      ,  1.35448237,  0.        ]]), array([[17.46      ,  1.35448237,  0.        ],
       [17.46      ,  1.37672996,  0.        ]]), array([[17.46      ,  1.37672996,  0.        ],
       [17.46      ,  1.39044522,  0.        ]]), array([[17.46      ,  1.39044522,  0.        ],
       [17.46      ,  1.40414309,  0.        ]]), array([[17.46      ,  1.40414309,  0.        ],
       [17.46      ,  1.42005436,  0.        ]]), array([[17.46      ,  1.42005436,  0.        ],
       [17.46      ,  1.44490877,  0.        ]]), array([[17.46      ,  1.44490877,  0.        ],
       [17.46      ,  1.44970823,  0.        ]]), array([[17.46      ,  1.44970823,  0.        ],
       [17.46      ,  1.47513428,  0.        ]]), array([[17.46      ,  1.47513428,  0.        ],
       [17.46      ,  1.4760202 ,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      13] Segmented line [[18.06  0.85  0.  ]
 [18.06  3.    0.  ]] different from original length by ratio 7.821481e-05
 segments: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [array([[18.06      ,  0.85      ,  0.        ],
       [18.06      ,  0.86116437,  0.        ]]), array([[18.06      ,  0.86116437,  0.        ],
       [18.06      ,  0.88109424,  0.        ]]), array([[18.06      ,  0.88109424,  0.        ],
       [18.06      ,  0.90031956,  0.        ]]), array([[18.06      ,  0.90031956,  0.        ],
       [18.06      ,  0.9104895 ,  0.        ]]), array([[18.06      ,  0.9104895 ,  0.        ],
       [18.06      ,  0.92163914,  0.        ]]), array([[18.06      ,  0.92163914,  0.        ],
       [18.06      ,  0.93707191,  0.        ]]), array([[18.06      ,  0.93707191,  0.        ],
       [18.06      ,  0.9470652 ,  0.        ]]), array([[18.06      ,  0.9470652 ,  0.        ],
       [18.06      ,  0.98217849,  0.        ]]), array([[18.06      ,  0.98234665,  0.        ],
       [18.06      ,  1.00965105,  0.        ]]), array([[18.06      ,  1.00965105,  0.        ],
       [18.06      ,  1.01621287,  0.        ]]), array([[18.06      ,  1.01621287,  0.        ],
       [18.06      ,  1.03382798,  0.        ]]), array([[18.06      ,  1.03382798,  0.        ],
       [18.06      ,  1.04454475,  0.        ]]), array([[18.06      ,  1.04454475,  0.        ],
       [18.06      ,  1.07230441,  0.        ]]), array([[18.06      ,  1.07230441,  0.        ],
       [18.06      ,  1.07795596,  0.        ]]), array([[18.06      ,  1.07795596,  0.        ],
       [18.06      ,  1.10654903,  0.        ]]), array([[18.06      ,  1.10654903,  0.        ],
       [18.06      ,  1.10821509,  0.        ]]), array([[18.06      ,  1.10821509,  0.        ],
       [18.06      ,  1.10857532,  0.        ]]), array([[18.06      ,  1.10857532,  0.        ],
       [18.06      ,  1.11024976,  0.        ]]), array([[18.06      ,  1.11024976,  0.        ],
       [18.06      ,  1.13754463,  0.        ]]), array([[18.06      ,  1.13754463,  0.        ],
       [18.06      ,  1.15484667,  0.        ]]), array([[18.06      ,  1.15484667,  0.        ],
       [18.06      ,  1.16598491,  0.        ]]), array([[18.06      ,  1.16598491,  0.        ],
       [18.06      ,  1.16994843,  0.        ]]), array([[18.06      ,  1.16994843,  0.        ],
       [18.06      ,  1.19103769,  0.        ]]), array([[18.06      ,  1.19103769,  0.        ],
       [18.06      ,  1.2077237 ,  0.        ]]), array([[18.06      ,  1.2077237 ,  0.        ],
       [18.06      ,  1.23198877,  0.        ]]), array([[18.06      ,  1.23198877,  0.        ],
       [18.06      ,  1.2434207 ,  0.        ]]), array([[18.06      ,  1.2434207 ,  0.        ],
       [18.06      ,  1.26299919,  0.        ]]), array([[18.06      ,  1.26299919,  0.        ],
       [18.06      ,  1.27876816,  0.        ]]), array([[18.06      ,  1.27876816,  0.        ],
       [18.06      ,  1.2997863 ,  0.        ]]), array([[18.06      ,  1.2997863 ,  0.        ],
       [18.06      ,  1.30574435,  0.        ]]), array([[18.06      ,  1.30574435,  0.        ],
       [18.06      ,  1.3077699 ,  0.        ]]), array([[18.06      ,  1.3077699 ,  0.        ],
       [18.06      ,  1.34512312,  0.        ]]), array([[18.06      ,  1.34512312,  0.        ],
       [18.06      ,  1.35177681,  0.        ]]), array([[18.06      ,  1.35177681,  0.        ],
       [18.06      ,  1.3913345 ,  0.        ]]), array([[18.06      ,  1.3913345 ,  0.        ],
       [18.06      ,  1.39767326,  0.        ]]), array([[18.06      ,  1.39767326,  0.        ],
       [18.06      ,  1.40700182,  0.        ]]), array([[18.06      ,  1.40700182,  0.        ],
       [18.06      ,  1.42894572,  0.        ]]), array([[18.06      ,  1.42894572,  0.        ],
       [18.06      ,  1.44120572,  0.        ]]), array([[18.06      ,  1.44120572,  0.        ],
       [18.06      ,  1.44616081,  0.        ]]), array([[18.06      ,  1.44616081,  0.        ],
       [18.06      ,  1.45128151,  0.        ]]), array([[18.06      ,  1.45128151,  0.        ],
       [18.06      ,  1.46814387,  0.        ]]), array([[18.06      ,  1.46814387,  0.        ],
       [18.06      ,  1.48035137,  0.        ]]), array([[18.06      ,  1.48035137,  0.        ],
       [18.06      ,  1.50930475,  0.        ]]), array([[18.06      ,  1.50930475,  0.        ],
       [18.06      ,  1.51876272,  0.        ]]), array([[18.06      ,  1.51876272,  0.        ],
       [18.06      ,  1.54005634,  0.        ]]), array([[18.06      ,  1.54005634,  0.        ],
       [18.06      ,  1.54834477,  0.        ]]), array([[18.06      ,  1.54834477,  0.        ],
       [18.06      ,  1.57062102,  0.        ]]), array([[18.06      ,  1.57062102,  0.        ],
       [18.06      ,  1.58056872,  0.        ]]), array([[18.06      ,  1.58056872,  0.        ],
       [18.06      ,  1.59945946,  0.        ]]), array([[18.06      ,  1.59945946,  0.        ],
       [18.06      ,  1.62195148,  0.        ]]), array([[18.06      ,  1.62195148,  0.        ],
       [18.06      ,  1.62892369,  0.        ]]), array([[18.06      ,  1.62892369,  0.        ],
       [18.06      ,  1.63720731,  0.        ]]), array([[18.06      ,  1.63720731,  0.        ],
       [18.06      ,  1.66646892,  0.        ]]), array([[18.06      ,  1.66646892,  0.        ],
       [18.06      ,  1.67672347,  0.        ]]), array([[18.06      ,  1.67672347,  0.        ],
       [18.06      ,  1.69587617,  0.        ]]), array([[18.06      ,  1.69587617,  0.        ],
       [18.06      ,  1.70491847,  0.        ]]), array([[18.06      ,  1.70491847,  0.        ],
       [18.06      ,  1.73453838,  0.        ]]), array([[18.06      ,  1.73453838,  0.        ],
       [18.06      ,  1.73762044,  0.        ]]), array([[18.06      ,  1.73762044,  0.        ],
       [18.06      ,  1.73850866,  0.        ]]), array([[18.06      ,  1.73850866,  0.        ],
       [18.06      ,  1.74083713,  0.        ]]), array([[18.06      ,  1.74083713,  0.        ],
       [18.06      ,  1.76731482,  0.        ]]), array([[18.06      ,  1.76731482,  0.        ],
       [18.06      ,  1.79067662,  0.        ]]), array([[18.06      ,  1.79067662,  0.        ],
       [18.06      ,  1.79876668,  0.        ]]), array([[18.06      ,  1.79876668,  0.        ],
       [18.06      ,  1.80335144,  0.        ]]), array([[18.06      ,  1.80335144,  0.        ],
       [18.06      ,  1.82039414,  0.        ]]), array([[18.06      ,  1.82039414,  0.        ],
       [18.06      ,  1.84117844,  0.        ]]), array([[18.06      ,  1.84117844,  0.        ],
       [18.06      ,  1.85090773,  0.        ]]), array([[18.06      ,  1.85090773,  0.        ],
       [18.06      ,  1.85610288,  0.        ]]), array([[18.06      ,  1.85610288,  0.        ],
       [18.06      ,  1.8822857 ,  0.        ]]), array([[18.06      ,  1.8822857 ,  0.        ],
       [18.06      ,  1.88700841,  0.        ]]), array([[18.06      ,  1.88700841,  0.        ],
       [18.06      ,  1.91299328,  0.        ]]), array([[18.06      ,  1.91299328,  0.        ],
       [18.06      ,  1.92070903,  0.        ]]), array([[18.06      ,  1.92070903,  0.        ],
       [18.06      ,  1.9371502 ,  0.        ]]), array([[18.06      ,  1.9371502 ,  0.        ],
       [18.06      ,  1.95007771,  0.        ]]), array([[18.06      ,  1.95007771,  0.        ],
       [18.06      ,  1.97552774,  0.        ]]), array([[18.06      ,  1.97552774,  0.        ],
       [18.06      ,  1.98112096,  0.        ]]), array([[18.06      ,  1.98112096,  0.        ],
       [18.06      ,  1.99755127,  0.        ]]), array([[18.06      ,  1.99755127,  0.        ],
       [18.06      ,  2.00574843,  0.        ]]), array([[18.06      ,  2.00574843,  0.        ],
       [18.06      ,  2.00729011,  0.        ]]), array([[18.06      ,  2.00729011,  0.        ],
       [18.06      ,  2.02149973,  0.        ]]), array([[18.06      ,  2.02149973,  0.        ],
       [18.06      ,  2.03247319,  0.        ]]), array([[18.06      ,  2.03247319,  0.        ],
       [18.06      ,  2.03401529,  0.        ]]), array([[18.06      ,  2.03401529,  0.        ],
       [18.06      ,  2.03794295,  0.        ]]), array([[18.06      ,  2.03794295,  0.        ],
       [18.06      ,  2.06916639,  0.        ]]), array([[18.06      ,  2.06916639,  0.        ],
       [18.06      ,  2.08346804,  0.        ]]), array([[18.06      ,  2.08346804,  0.        ],
       [18.06      ,  2.10433079,  0.        ]]), array([[18.06      ,  2.10433079,  0.        ],
       [18.06      ,  2.11092696,  0.        ]]), array([[18.06      ,  2.11092696,  0.        ],
       [18.06      ,  2.13701982,  0.        ]]), array([[18.06      ,  2.13701982,  0.        ],
       [18.06      ,  2.14173157,  0.        ]])], [], [array([[18.06      ,  2.14173157,  0.        ],
       [18.06      ,  2.1470877 ,  0.        ]]), array([[18.06      ,  2.1470877 ,  0.        ],
       [18.06      ,  2.17318706,  0.        ]]), array([[18.06      ,  2.17318706,  0.        ],
       [18.06      ,  2.17795278,  0.        ]]), array([[18.06      ,  2.17795278,  0.        ],
       [18.06      ,  2.19337279,  0.        ]]), array([[18.06      ,  2.19337279,  0.        ],
       [18.06      ,  2.21136159,  0.        ]]), array([[18.06      ,  2.21136159,  0.        ],
       [18.06      ,  2.22162605,  0.        ]]), array([[18.06      ,  2.22162605,  0.        ],
       [18.06      ,  2.23604692,  0.        ]]), array([[18.06      ,  2.23604692,  0.        ],
       [18.06      ,  2.25441104,  0.        ]]), array([[18.06      ,  2.25441104,  0.        ],
       [18.06      ,  2.2634405 ,  0.        ]]), array([[18.06      ,  2.2634405 ,  0.        ],
       [18.06      ,  2.29080334,  0.        ]]), array([[18.06      ,  2.29080334,  0.        ],
       [18.06      ,  2.29915203,  0.        ]]), array([[18.06      ,  2.29915203,  0.        ],
       [18.06      ,  2.30144231,  0.        ]]), array([[18.06      ,  2.30144231,  0.        ],
       [18.06      ,  2.31143473,  0.        ]]), array([[18.06      ,  2.31143473,  0.        ],
       [18.06      ,  2.3362044 ,  0.        ]]), array([[18.06      ,  2.3362044 ,  0.        ],
       [18.06      ,  2.34464859,  0.        ]]), array([[18.06      ,  2.34464859,  0.        ],
       [18.06      ,  2.37569782,  0.        ]]), array([[18.06      ,  2.37569782,  0.        ],
       [18.06      ,  2.40235589,  0.        ]]), array([[18.06      ,  2.40235589,  0.        ],
       [18.06      ,  2.40339737,  0.        ]]), array([[18.06      ,  2.40339737,  0.        ],
       [18.06      ,  2.40364794,  0.        ]]), array([[18.06      ,  2.40364794,  0.        ],
       [18.06      ,  2.40467897,  0.        ]]), array([[18.06      ,  2.40467897,  0.        ],
       [18.06      ,  2.45209633,  0.        ]]), array([[18.06      ,  2.45209633,  0.        ],
       [18.06      ,  2.46792039,  0.        ]]), array([[18.06      ,  2.46792039,  0.        ],
       [18.06      ,  2.47839555,  0.        ]]), array([[18.06      ,  2.47839555,  0.        ],
       [18.06      ,  2.48887564,  0.        ]]), array([[18.06      ,  2.48887564,  0.        ],
       [18.06      ,  2.49838699,  0.        ]]), array([[18.06      ,  2.49838699,  0.        ],
       [18.06      ,  2.51219633,  0.        ]]), array([[18.06      ,  2.51219633,  0.        ],
       [18.06      ,  2.52282818,  0.        ]]), array([[18.06      ,  2.52282818,  0.        ],
       [18.06      ,  2.5383877 ,  0.        ]]), array([[18.06      ,  2.5383877 ,  0.        ],
       [18.06      ,  2.54579656,  0.        ]]), array([[18.06      ,  2.54579656,  0.        ],
       [18.06      ,  2.5501658 ,  0.        ]]), array([[18.06      ,  2.5501658 ,  0.        ],
       [18.06      ,  2.57762757,  0.        ]]), array([[18.06      ,  2.57762757,  0.        ],
       [18.06      ,  2.59409651,  0.        ]]), array([[18.06      ,  2.59409651,  0.        ],
       [18.06      ,  2.59590897,  0.        ]]), array([[18.06      ,  2.59590897,  0.        ],
       [18.06      ,  2.62668263,  0.        ]]), array([[18.06      ,  2.62668263,  0.        ],
       [18.06      ,  2.6316047 ,  0.        ]]), array([[18.06      ,  2.6316047 ,  0.        ],
       [18.06      ,  2.64221317,  0.        ]]), array([[18.06      ,  2.64221317,  0.        ],
       [18.06      ,  2.66038919,  0.        ]]), array([[18.06      ,  2.66038919,  0.        ],
       [18.06      ,  2.6708984 ,  0.        ]]), array([[18.06      ,  2.6708984 ,  0.        ],
       [18.06      ,  2.68049456,  0.        ]]), array([[18.06      ,  2.68049456,  0.        ],
       [18.06      ,  2.68755983,  0.        ]]), array([[18.06      ,  2.68755983,  0.        ],
       [18.06      ,  2.70078476,  0.        ]]), array([[18.06      ,  2.70078476,  0.        ],
       [18.06      ,  2.71656062,  0.        ]]), array([[18.06      ,  2.71656062,  0.        ],
       [18.06      ,  2.73120647,  0.        ]]), array([[18.06      ,  2.73120647,  0.        ],
       [18.06      ,  2.74540509,  0.        ]]), array([[18.06      ,  2.74540509,  0.        ],
       [18.06      ,  2.77454996,  0.        ]]), array([[18.06      ,  2.77454996,  0.        ],
       [18.06      ,  2.77757654,  0.        ]]), array([[18.06      ,  2.77757654,  0.        ],
       [18.06      ,  2.78013267,  0.        ]]), array([[18.06      ,  2.78013267,  0.        ],
       [18.06      ,  2.80173696,  0.        ]]), array([[18.06      ,  2.80173696,  0.        ],
       [18.06      ,  2.81697372,  0.        ]]), array([[18.06      ,  2.81697372,  0.        ],
       [18.06      ,  2.83341321,  0.        ]]), array([[18.06      ,  2.83341321,  0.        ],
       [18.06      ,  2.85284321,  0.        ]]), array([[18.06      ,  2.85284321,  0.        ],
       [18.06      ,  2.86526257,  0.        ]]), array([[18.06      ,  2.86526257,  0.        ],
       [18.06      ,  2.87878305,  0.        ]]), array([[18.06      ,  2.87878305,  0.        ],
       [18.06      ,  2.88668732,  0.        ]]), array([[18.06      ,  2.88668732,  0.        ],
       [18.06      ,  2.90731654,  0.        ]]), array([[18.06      ,  2.90731654,  0.        ],
       [18.06      ,  2.9304697 ,  0.        ]]), array([[18.06      ,  2.9304697 ,  0.        ],
       [18.06      ,  2.93619524,  0.        ]]), array([[18.06      ,  2.93619524,  0.        ],
       [18.06      ,  2.94416908,  0.        ]]), array([[18.06      ,  2.94416908,  0.        ],
       [18.06      ,  2.96410507,  0.        ]]), array([[18.06      ,  2.96410507,  0.        ],
       [18.06      ,  2.97738882,  0.        ]]), array([[18.06      ,  2.97738882,  0.        ],
       [18.06      ,  3.        ,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      13] Segmented line [[40.62  0.85  0.  ]
 [40.62  3.    0.  ]] different from original length by ratio 7.123118e-05
 segments: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [array([[40.62      ,  2.06722952,  0.        ],
       [40.62      ,  2.09620483,  0.        ]]), array([[40.62      ,  2.09620483,  0.        ],
       [40.62      ,  2.09751048,  0.        ]]), array([[40.62      ,  2.09756585,  0.        ],
       [40.62      ,  2.12324718,  0.        ]]), array([[40.62      ,  2.12324718,  0.        ],
       [40.62      ,  2.13723055,  0.        ]]), array([[40.62      ,  2.13723055,  0.        ],
       [40.62      ,  2.15360768,  0.        ]]), array([[40.62      ,  2.15360768,  0.        ],
       [40.62      ,  2.17828276,  0.        ]]), array([[40.62      ,  2.17828276,  0.        ],
       [40.62      ,  2.17939043,  0.        ]]), array([[40.62      ,  2.17939043,  0.        ],
       [40.62      ,  2.181523  ,  0.        ]]), array([[40.62      ,  2.181523  ,  0.        ],
       [40.62      ,  2.21307801,  0.        ]]), array([[40.62      ,  2.21307801,  0.        ],
       [40.62      ,  2.22263319,  0.        ]]), array([[40.62      ,  2.22263319,  0.        ],
       [40.62      ,  2.24556391,  0.        ]]), array([[40.62      ,  2.24556391,  0.        ],
       [40.62      ,  2.27080973,  0.        ]]), array([[40.62      ,  2.27080973,  0.        ],
       [40.62      ,  2.28372366,  0.        ]]), array([[40.62      ,  2.28372366,  0.        ],
       [40.62      ,  2.29581521,  0.        ]]), array([[40.62      ,  2.29581521,  0.        ],
       [40.62      ,  2.31692603,  0.        ]]), array([[40.62      ,  2.31692603,  0.        ],
       [40.62      ,  2.34029571,  0.        ]]), array([[40.62      ,  2.34029571,  0.        ],
       [40.62      ,  2.34528244,  0.        ]]), array([[40.62      ,  2.34528244,  0.        ],
       [40.62      ,  2.36878181,  0.        ]]), array([[40.62      ,  2.36878181,  0.        ],
       [40.62      ,  2.38625026,  0.        ]]), array([[40.62      ,  2.38625026,  0.        ],
       [40.62      ,  2.38929141,  0.        ]]), array([[40.62      ,  2.38929141,  0.        ],
       [40.62      ,  2.39490196,  0.        ]]), array([[40.62      ,  2.39490196,  0.        ],
       [40.62      ,  2.43345851,  0.        ]]), array([[40.62      ,  2.43345851,  0.        ],
       [40.62      ,  2.4743732 ,  0.        ]]), array([[40.62      ,  2.4743732 ,  0.        ],
       [40.62      ,  2.48087488,  0.        ]]), array([[40.62      ,  2.48087488,  0.        ],
       [40.62      ,  2.48694769,  0.        ]]), array([[40.62      ,  2.48694769,  0.        ],
       [40.62      ,  2.5092379 ,  0.        ]]), array([[40.62      ,  2.5092379 ,  0.        ],
       [40.62      ,  2.52264182,  0.        ]]), array([[40.62      ,  2.52264182,  0.        ],
       [40.62      ,  2.53356184,  0.        ]]), array([[40.62      ,  2.53356184,  0.        ],
       [40.62      ,  2.54810352,  0.        ]]), array([[40.62      ,  2.54810352,  0.        ],
       [40.62      ,  2.55378876,  0.        ]]), array([[40.62      ,  2.55378876,  0.        ],
       [40.62      ,  2.55723937,  0.        ]]), array([[40.62      ,  2.55723937,  0.        ],
       [40.62      ,  2.56340839,  0.        ]]), array([[40.62      ,  2.56340839,  0.        ],
       [40.62      ,  2.57940027,  0.        ]]), array([[40.62      ,  2.57940027,  0.        ],
       [40.62      ,  2.5868411 ,  0.        ]]), array([[40.62      ,  2.5868411 ,  0.        ],
       [40.62      ,  2.60753815,  0.        ]]), array([[40.62      ,  2.60753815,  0.        ],
       [40.62      ,  2.60766237,  0.        ]]), array([[40.62      ,  2.60776014,  0.        ],
       [40.62      ,  2.63488861,  0.        ]]), array([[40.62      ,  2.63488861,  0.        ],
       [40.62      ,  2.65975301,  0.        ]]), array([[40.62      ,  2.65975301,  0.        ],
       [40.62      ,  2.66497689,  0.        ]]), array([[40.62      ,  2.66497689,  0.        ],
       [40.62      ,  2.66817017,  0.        ]]), array([[40.62      ,  2.66817017,  0.        ],
       [40.62      ,  2.68831338,  0.        ]]), array([[40.62      ,  2.68831338,  0.        ],
       [40.62      ,  2.69265358,  0.        ]]), array([[40.62      ,  2.69265358,  0.        ],
       [40.62      ,  2.69341386,  0.        ]]), array([[40.62      ,  2.69341386,  0.        ],
       [40.62      ,  2.71871034,  0.        ]]), array([[40.62      ,  2.71871034,  0.        ],
       [40.62      ,  2.72516155,  0.        ]]), array([[40.62      ,  2.72516155,  0.        ],
       [40.62      ,  2.75131243,  0.        ]]), array([[40.62      ,  2.75131243,  0.        ],
       [40.62      ,  2.76365706,  0.        ]]), array([[40.62      ,  2.76365706,  0.        ],
       [40.62      ,  2.7822154 ,  0.        ]]), array([[40.62      ,  2.7822154 ,  0.        ],
       [40.62      ,  2.79326588,  0.        ]]), array([[40.62      ,  2.79326588,  0.        ],
       [40.62      ,  2.81020427,  0.        ]]), array([[40.62      ,  2.81020427,  0.        ],
       [40.62      ,  2.82978787,  0.        ]]), array([[40.62      ,  2.82978787,  0.        ],
       [40.62      ,  2.8410592 ,  0.        ]]), array([[40.62      ,  2.8410592 ,  0.        ],
       [40.62      ,  2.86090887,  0.        ]]), array([[40.62      ,  2.86090887,  0.        ],
       [40.62      ,  2.87969569,  0.        ]]), array([[40.62      ,  2.87969569,  0.        ],
       [40.62      ,  2.88733787,  0.        ]]), array([[40.62      ,  2.88733787,  0.        ],
       [40.62      ,  2.90725161,  0.        ]]), array([[40.62      ,  2.90725161,  0.        ],
       [40.62      ,  2.91628107,  0.        ]]), array([[40.62      ,  2.91628107,  0.        ],
       [40.62      ,  2.93028412,  0.        ]]), array([[40.62      ,  2.93028412,  0.        ],
       [40.62      ,  2.94845293,  0.        ]]), array([[40.62      ,  2.94845293,  0.        ],
       [40.62      ,  2.9672331 ,  0.        ]]), array([[40.62     ,  2.9672331,  0.       ],
       [40.62     ,  2.9982749,  0.       ]]), array([[40.62     ,  2.9982749,  0.       ],
array([[40.62      ,  0.85      ,  0.        ],
       [40.62      ,  0.85869754,  0.        ]]), array([[40.62      ,  0.85869754,  0.        ],
       [40.62      ,  0.88064243,  0.        ]]), array([[40.62      ,  0.88064243,  0.        ],
       [40.62      ,  0.89583415,  0.        ]]), array([[40.62      ,  0.89583415,  0.        ],
       [40.62      ,  0.90801825,  0.        ]]), array([[40.62      ,  0.90801825,  0.        ],
       [40.62      ,  0.93245362,  0.        ]]), array([[40.62      ,  0.93245362,  0.        ],
       [40.62      ,  0.94230221,  0.        ]]), array([[40.62      ,  0.94230221,  0.        ],
       [40.62      ,  0.95712469,  0.        ]]), array([[40.62      ,  0.95712469,  0.        ],
       [40.62      ,  0.96801916,  0.        ]]), array([[40.62      ,  0.96801916,  0.        ],
       [40.62      ,  0.98508143,  0.        ]]), array([[40.62      ,  0.98508143,  0.        ],
       [40.62      ,  0.99863483,  0.        ]]), array([[40.62      ,  0.99863483,  0.        ],
       [40.62      ,  1.03090077,  0.        ]]), array([[40.62      ,  1.03090077,  0.        ],
       [40.62      ,  1.04094225,  0.        ]]), array([[40.62      ,  1.04094225,  0.        ],
       [40.62      ,  1.06320526,  0.        ]]), array([[40.62      ,  1.06320526,  0.        ],
       [40.62      ,  1.07040729,  0.        ]]), array([[40.62      ,  1.07040729,  0.        ],
       [40.62      ,  1.09905663,  0.        ]]), array([[40.62      ,  1.09905663,  0.        ],
       [40.62      ,  1.10992969,  0.        ]]), array([[40.62      ,  1.10992969,  0.        ],
       [40.62      ,  1.11127081,  0.        ]]), array([[40.62      ,  1.11127081,  0.        ],
       [40.62      ,  1.13760637,  0.        ]]), array([[40.62      ,  1.13760637,  0.        ],
       [40.62      ,  1.14707809,  0.        ]]), array([[40.62      ,  1.14707809,  0.        ],
       [40.62      ,  1.16290873,  0.        ]]), array([[40.62      ,  1.16290873,  0.        ],
       [40.62      ,  1.17901488,  0.        ]]), array([[40.62      ,  1.17901488,  0.        ],
       [40.62      ,  1.19545088,  0.        ]]), array([[40.62      ,  1.19545088,  0.        ],
       [40.62      ,  1.20420157,  0.        ]]), array([[40.62      ,  1.20420157,  0.        ],
       [40.62      ,  1.22006723,  0.        ]]), array([[40.62      ,  1.22006723,  0.        ],
       [40.62      ,  1.2279829 ,  0.        ]]), array([[40.62      ,  1.2279829 ,  0.        ],
       [40.62      ,  1.23912183,  0.        ]]), array([[40.62      ,  1.23912183,  0.        ],
       [40.62      ,  1.26059201,  0.        ]]), array([[40.62      ,  1.26059201,  0.        ],
       [40.62      ,  1.27508187,  0.        ]]), array([[40.62      ,  1.27508187,  0.        ],
       [40.62      ,  1.29721066,  0.        ]]), array([[40.62      ,  1.29721066,  0.        ],
       [40.62      ,  1.30642676,  0.        ]]), array([[40.62      ,  1.30642676,  0.        ],
       [40.62      ,  1.33914095,  0.        ]]), array([[40.62      ,  1.33914095,  0.        ],
       [40.62      ,  1.34051933,  0.        ]]), array([[40.62      ,  1.34051933,  0.        ],
       [40.62      ,  1.34245077,  0.        ]]), array([[40.62      ,  1.34245077,  0.        ],
       [40.62      ,  1.36383395,  0.        ]]), array([[40.62      ,  1.36383395,  0.        ],
       [40.62      ,  1.3740182 ,  0.        ]]), array([[40.62     ,  1.3740182,  0.       ],
       [40.62     ,  1.3915353,  0.       ]]), array([[40.62     ,  1.3915353,  0.       ],
       [40.62     ,  1.4164245,  0.       ]]), array([[40.62      ,  1.4164245 ,  0.        ],
       [40.62      ,  1.41909322,  0.        ]]), array([[40.62      ,  1.41909322,  0.        ],
       [40.62      ,  1.4483515 ,  0.        ]]), array([[40.62      ,  1.4483515 ,  0.        ],
       [40.62      ,  1.45132477,  0.        ]]), array([[40.62      ,  1.45132477,  0.        ],
       [40.62      ,  1.45451639,  0.        ]]), array([[40.62      ,  1.45451639,  0.        ],
       [40.62      ,  1.48274294,  0.        ]]), array([[40.62      ,  1.48274294,  0.        ],
       [40.62      ,  1.51106113,  0.        ]]), array([[40.62      ,  1.51106113,  0.        ],
       [40.62      ,  1.51255821,  0.        ]]), array([[40.62      ,  1.51255821,  0.        ],
       [40.62      ,  1.51381167,  0.        ]]), array([[40.62      ,  1.51381167,  0.        ],
       [40.62      ,  1.53791616,  0.        ]]), array([[40.62      ,  1.53791616,  0.        ],
       [40.62      ,  1.54835207,  0.        ]]), array([[40.62      ,  1.54835207,  0.        ],
       [40.62      ,  1.57277701,  0.        ]]), array([[40.62      ,  1.57277701,  0.        ],
       [40.62      ,  1.59396184,  0.        ]]), array([[40.62      ,  1.59396184,  0.        ],
       [40.62      ,  1.60548144,  0.        ]]), array([[40.62      ,  1.60548144,  0.        ],
       [40.62      ,  1.61306015,  0.        ]]), array([[40.62      ,  1.61306015,  0.        ],
       [40.62      ,  1.63454909,  0.        ]]), array([[40.62      ,  1.63454909,  0.        ],
       [40.62      ,  1.65362036,  0.        ]]), array([[40.62      ,  1.65362036,  0.        ],
       [40.62      ,  1.66449589,  0.        ]]), array([[40.62      ,  1.66449589,  0.        ],
       [40.62      ,  1.6792027 ,  0.        ]]), array([[40.62      ,  1.6792027 ,  0.        ],
       [40.62      ,  1.69995205,  0.        ]]), array([[40.62      ,  1.69995205,  0.        ],
       [40.62      ,  1.71453414,  0.        ]]), array([[40.62      ,  1.71453414,  0.        ],
       [40.62      ,  1.72938461,  0.        ]]), array([[40.62      ,  1.72938461,  0.        ],
       [40.62      ,  1.74150189,  0.        ]]), array([[40.62      ,  1.74150189,  0.        ],
       [40.62      ,  1.75997786,  0.        ]]), array([[40.62      ,  1.75997786,  0.        ],
       [40.62      ,  1.77197158,  0.        ]]), array([[40.62      ,  1.77197158,  0.        ],
       [40.62      ,  1.77995335,  0.        ]]), array([[40.62      ,  1.77995335,  0.        ],
       [40.62      ,  1.79903527,  0.        ]]), array([[40.62      ,  1.79903527,  0.        ],
       [40.62      ,  1.82207204,  0.        ]]), array([[40.62      ,  1.82207204,  0.        ],
       [40.62      ,  1.82645314,  0.        ]]), array([[40.62      ,  1.82645314,  0.        ],
       [40.62      ,  1.83402817,  0.        ]]), array([[40.62      ,  1.83402817,  0.        ],
       [40.62      ,  1.8571503 ,  0.        ]]), array([[40.62      ,  1.8571503 ,  0.        ],
       [40.62      ,  1.87927974,  0.        ]]), array([[40.62      ,  1.87927974,  0.        ],
       [40.62      ,  1.88350664,  0.        ]]), array([[40.62      ,  1.88350664,  0.        ],
       [40.62      ,  1.90889913,  0.        ]]), array([[40.62      ,  1.90889913,  0.        ],
       [40.62      ,  1.91517743,  0.        ]])], [], [array([[40.62      ,  1.91517743,  0.        ],
       [40.62      ,  1.94270785,  0.        ]]), array([[40.62      ,  1.94270785,  0.        ],
       [40.62      ,  1.95924945,  0.        ]]), array([[40.62      ,  1.95924945,  0.        ],
       [40.62      ,  1.9775374 ,  0.        ]]), array([[40.62      ,  1.9775374 ,  0.        ],
       [40.62      ,  1.98251737,  0.        ]]), array([[40.62      ,  1.98251737,  0.        ],
       [40.62      ,  2.01258084,  0.        ]]), array([[40.62      ,  2.01258084,  0.        ],
       [40.62      ,  2.01467718,  0.        ]]), array([[40.62      ,  2.01467718,  0.        ],
       [40.62      ,  2.01867967,  0.        ]]), array([[40.62      ,  2.01867967,  0.        ],
       [40.62      ,  2.04140697,  0.        ]]), array([[40.62      ,  2.04140697,  0.        ],
       [40.62      ,  2.06602455,  0.        ]]), array([[40.62      ,  2.06602455,  0.        ],
       [40.62      ,  2.06722952,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      13] Segmented line [[43.35  0.85  0.  ]
 [43.35  3.    0.  ]] different from original length by ratio 9.794997e-05
 segmentsarray([[43.35      ,  1.71577326,  0.        ],
       [43.35      ,  1.73637806,  0.        ]]), array([[43.35      ,  1.73637806,  0.        ],
       [43.35      ,  1.75009719,  0.        ]]), array([[43.35      ,  1.75009719,  0.        ],
       [43.35      ,  1.76149591,  0.        ]]), array([[43.35      ,  1.76149591,  0.        ],
       [43.35      ,  1.7775848 ,  0.        ]]), array([[43.35      ,  1.7775848 ,  0.        ],
       [43.35      ,  1.79429275,  0.        ]]), array([[43.35      ,  1.79429275,  0.        ],
       [43.35      ,  1.81128537,  0.        ]]), array([[43.35      ,  1.81128537,  0.        ],
       [43.35      ,  1.8249251 ,  0.        ]]), array([[43.35      ,  1.8249251 ,  0.        ],
       [43.35      ,  1.85014319,  0.        ]]), array([[43.35      ,  1.85014319,  0.        ],
       [43.35      ,  1.85252834,  0.        ]]), array([[43.35      ,  1.85252834,  0.        ],
       [43.35      ,  1.85497598,  0.        ]]), array([[43.35      ,  1.85497598,  0.        ],
       [43.35      ,  1.87708718,  0.        ]]), array([[43.35      ,  1.87708718,  0.        ],
       [43.35      ,  1.89488474,  0.        ]]), array([[43.35      ,  1.89488474,  0.        ],
       [43.35      ,  1.90616349,  0.        ]]), array([[43.35      ,  1.90616349,  0.        ],
       [43.35      ,  1.91856604,  0.        ]]), array([[43.35      ,  1.91856604,  0.        ],
       [43.35      ,  1.9357654 ,  0.        ]]), array([[43.35      ,  1.9357654 ,  0.        ],
       [43.35      ,  1.94849813,  0.        ]]), array([[43.35      ,  1.94849813,  0.        ],
       [43.35      ,  1.96023111,  0.        ]]), array([[43.35      ,  1.96023111,  0.        ],
       [43.35      ,  1.98432901,  0.        ]]), array([[43.35      ,  1.98432901,  0.        ],
       [43.35      ,  1.99809853,  0.        ]]), array([[43.35      ,  1.99809853,  0.        ],
       [43.35      ,  2.00466107,  0.        ]]), array([[43.35      ,  2.00466107,  0.        ],
       [43.35      ,  2.02671052,  0.        ]]), array([[43.35      ,  2.02671052,  0.        ],
       [43.35      ,  2.04905589,  0.        ]]), array([[43.35      ,  2.04905589,  0.        ],
       [43.35      ,  2.05494364,  0.        ]]), array([[43.35      ,  2.05494364,  0.        ],
       [43.35      ,  2.06743892,  0.        ]]), array([[43.35      ,  2.06743892,  0.        ],
       [43.35      ,  2.08290789,  0.        ]]), array([[43.35      ,  2.08290789,  0.        ],
       [43.35      ,  2.09922788,  0.        ]]), array([[43.35      ,  2.09922788,  0.        ],
       [43.35      ,  2.11160611,  0.        ]]), array([[43.35      ,  2.11160611,  0.        ],
       [43.35      ,  2.11510369,  0.        ]]), array([[43.35      ,  2.11510369,  0.        ],
       [43.35      ,  2.14776626,  0.        ]]), array([[43.35      ,  2.14776626,  0.        ],
       [43.35      ,  2.15257548,  0.        ]]), array([[43.35      ,  2.15257548,  0.        ],
       [43.35      ,  2.18021325,  0.        ]]), array([[43.35      ,  2.18021325,  0.        ],
       [43.35      ,  2.18823903,  0.        ]]), array([[43.35      ,  2.18823903,  0.        ],
       [43.35      ,  2.18895307,  0.        ]]), array([[43.35      ,  2.18895307,  0.        ],
       [43.35      ,  2.19543232,  0.        ]]), array([[43.35      ,  2.19543232,  0.        ],
       [43.35      ,  2.22784006,  0.        ]]), array([[43.35      ,  2.22784006,  0.        ],
       [43.35      ,  2.23189796,  0.        ]]), array([[43.35      ,  2.23189796,  0.        ],
       [43.35      ,  2.24356918,  0.        ]]), array([[43.35      ,  2.24356918,  0.        ],
       [43.35      ,  2.25790145,  0.        ]]), array([[43.35      ,  2.25790145,  0.        ],
       [43.35      ,  2.26267509,  0.        ]]), array([[43.35      ,  2.26267509,  0.        ],
       [43.35      ,  2.2844059 ,  0.        ]]), array([[43.35      ,  2.2844059 ,  0.        ],
       [43.35      ,  2.29407621,  0.        ]]), array([[43.35      ,  2.29407621,  0.        ],
       [43.35      ,  2.3186715 ,  0.        ]]), array([[43.35      ,  2.3186715 ,  0.        ],
       [43.35      ,  2.33568109,  0.        ]]), array([[43.35      ,  2.33568109,  0.        ],
       [43.35      ,  2.35512672,  0.        ]]), array([[43.35      ,  2.35512672,  0.        ],
       [43.35      ,  2.36220442,  0.        ]]), array([[43.35      ,  2.36220442,  0.        ],
       [43.35      ,  2.37361021,  0.        ]]), array([[43.35      ,  2.37361021,  0.        ],
       [43.35      ,  2.38849444,  0.        ]]), array([[43.35      ,  2.38849444,  0.        ],
       [43.35      ,  2.39770744,  0.        ]]), array([[43.35      ,  2.39770744,  0.        ],
       [43.35      ,  2.42261842,  0.        ]]), array([[43.35      ,  2.42261842,  0.        ],
       [43.35      ,  2.44553837,  0.        ]]), array([[43.35      ,  2.44553837,  0.        ],
       [43.35      ,  2.45618018,  0.        ]]), array([[43.35      ,  2.45618018,  0.        ],
       [43.35      ,  2.47274678,  0.        ]]), array([[43.35      ,  2.47274678,  0.        ],
       [43.35      ,  2.48110881,  0.        ]]), array([[43.35      ,  2.48110881,  0.        ],
       [43.35      ,  2.48815415,  0.        ]]), array([[43.35      ,  2.48815415,  0.        ],
       [43.35      ,  2.51196582,  0.        ]])], [array([[43.35      ,  2.51196582,  0.        ],
       [43.35      ,  2.51537421,  0.        ]]), array([[43.35      ,  2.51537421,  0.        ],
       [43.35      ,  2.54457036,  0.        ]]), array([[43.35      ,  2.54457036,  0.        ],
       [43.35      ,  2.56525294,  0.        ]]), array([[43.35      ,  2.56525294,  0.        ],
       [43.35      ,  2.57489522,  0.        ]]), array([[43.35      ,  2.57489522,  0.        ],
       [43.35      ,  2.58700136,  0.        ]]), array([[43.35      ,  2.58700136,  0.        ],
       [43.35      ,  2.6022848 ,  0.        ]]), array([[43.35      ,  2.6022848 ,  0.        ],
       [43.35      ,  2.62778019,  0.        ]]), array([[43.35      ,  2.62778019,  0.        ],
       [43.35      ,  2.63249673,  0.        ]]), array([[43.35      ,  2.63249673,  0.        ],
       [43.35      ,  2.63427793,  0.        ]]), array([[43.35      ,  2.63427793,  0.        ],
       [43.35      ,  2.63709843,  0.        ]]), array([[43.35      ,  2.63709843,  0.        ],
       [43.35      ,  2.66671884,  0.        ]]), array([[43.35      ,  2.66671884,  0.        ],
       [43.35      ,  2.6835948 ,  0.        ]]), array([[43.35      ,  2.6835948 ,  0.        ],
       [43.35      ,  2.69086906,  0.        ]]), array([[43.35      ,  2.69086906,  0.        ],
       [43.35      ,  2.69847356,  0.        ]]), array([[43.35      ,  2.69847356,  0.        ],
       [43.35      ,  2.71536966,  0.        ]]), array([[43.35      ,  2.71536966,  0.        ],
       [43.35      ,  2.73585943,  0.        ]]), array([[43.35      ,  2.73585943,  0.        ],
       [43.35      ,  2.7493499 ,  0.        ]]), array([[43.35      ,  2.7493499 ,  0.        ],
       [43.35      ,  2.77659976,  0.        ]]), array([[43.35      ,  2.77659976,  0.        ],
       [43.35      ,  2.78576529,  0.        ]]), array([[43.35      ,  2.78576529,  0.        ],
       [43.35      ,  2.81053036,  0.        ]]), array([[43.35      ,  2.81053036,  0.        ],
       [43.35      ,  2.82044539,  0.        ]]), array([[43.35      ,  2.82044539,  0.        ],
       [43.35      ,  2.83825705,  0.        ]]), array([[43.35      ,  2.83825705,  0.        ],
       [43.35      ,  2.84974463,  0.        ]]), array([[43.35      ,  2.84974463,  0.        ],
       [43.35      ,  2.87159458,  0.        ]]), array([[43.35      ,  2.87159458,  0.        ],
       [43.35      ,  2.88648846,  0.        ]]), array([[43.35      ,  2.88648846,  0.        ],
       [43.35      ,  2.90823117,  0.        ]]), array([[43.35      ,  2.90823117,  0.        ],
       [43.35      ,  2.92001622,  0.        ]]), array([[43.35      ,  2.92001622,  0.        ],
       [43.35      ,  2.94357284,  0.        ]]), array([[43.35      ,  2.94357284,  0.        ],
       [43.35      ,  2.95092395,  0.        ]]), array([[43.35      ,  2.95092395,  0.        ],
       [43.35      ,  2.97658739,  0.        ]]), array([[43.35      ,  2.97658739,  0.        ],
       [43.35      ,  2.97964263,  0.        ]]), array([[43.35      ,  2.97964263,  0.        ],
       [43.35      ,  3.        ,  0.        ]])], [array([[43.35      ,  0.85      ,  0.        ],
       [43.35      ,  0.86540143,  0.        ]]), array([[43.35      ,  0.86540143,  0.        ],
       [43.35      ,  0.88148692,  0.        ]]), array([[43.35      ,  0.88148692,  0.        ],
       [43.35      ,  0.89189133,  0.        ]]), array([[43.35      ,  0.89189133,  0.        ],
       [43.35      ,  0.93166431,  0.        ]]), array([[43.35      ,  0.93166431,  0.        ],
       [43.35      ,  0.9351741 ,  0.        ]]), array([[43.35      ,  0.9351741 ,  0.        ],
       [43.35      ,  0.93661248,  0.        ]]), array([[43.35      ,  0.93661248,  0.        ],
       [43.35      ,  0.96893367,  0.        ]]), array([[43.35      ,  0.96893367,  0.        ],
       [43.35      ,  0.99639225,  0.        ]]), array([[43.35      ,  0.99639225,  0.        ],
       [43.35      ,  1.00342183,  0.        ]]), array([[43.35      ,  1.00342183,  0.        ],
       [43.35      ,  1.00627226,  0.        ]]), array([[43.35      ,  1.00627226,  0.        ],
       [43.35      ,  1.03687073,  0.        ]]), array([[43.35      ,  1.03708132,  0.        ],
       [43.35      ,  1.03746939,  0.        ]]), array([[43.35      ,  1.03746939,  0.        ],
       [43.35      ,  1.06146619,  0.        ]]), array([[43.35      ,  1.06146619,  0.        ],
       [43.35      ,  1.07189966,  0.        ]]), array([[43.35      ,  1.07189966,  0.        ],
       [43.35      ,  1.09238088,  0.        ]]), array([[43.35      ,  1.09238088,  0.        ],
       [43.35      ,  1.09767501,  0.        ]]), array([[43.35      ,  1.09767501,  0.        ],
       [43.35      ,  1.11594268,  0.        ]]), array([[43.35      ,  1.11594268,  0.        ],
       [43.35      ,  1.12841146,  0.        ]]), array([[43.35      ,  1.12841146,  0.        ],
       [43.35      ,  1.14800361,  0.        ]]), array([[43.35      ,  1.14800361,  0.        ],
       [43.35      ,  1.16053597,  0.        ]]), array([[43.35      ,  1.16053597,  0.        ],
       [43.35      ,  1.17977001,  0.        ]]), array([[43.35      ,  1.17977001,  0.        ],
       [43.35      ,  1.19753082,  0.        ]]), array([[43.35      ,  1.19753082,  0.        ],
       [43.35      ,  1.21479059,  0.        ]]), array([[43.35      ,  1.21479059,  0.        ],
       [43.35      ,  1.23104341,  0.        ]]), array([[43.35      ,  1.23104341,  0.        ],
       [43.35      ,  1.2408068 ,  0.        ]]), array([[43.35      ,  1.2408068 ,  0.        ],
       [43.35      ,  1.26065782,  0.        ]]), array([[43.35      ,  1.26065782,  0.        ],
       [43.35      ,  1.27199543,  0.        ]]), array([[43.35      ,  1.27199543,  0.        ],
       [43.35      ,  1.29288307,  0.        ]]), array([[43.35      ,  1.29288307,  0.        ],
       [43.35      ,  1.31725374,  0.        ]]), array([[43.35      ,  1.31725374,  0.        ],
       [43.35      ,  1.32540994,  0.        ]]), array([[43.35      ,  1.32540994,  0.        ],
       [43.35      ,  1.33917969,  0.        ]]), array([[43.35      ,  1.33917969,  0.        ],
       [43.35      ,  1.35726502,  0.        ]]), array([[43.35      ,  1.35726502,  0.        ],
       [43.35      ,  1.36911771,  0.        ]]), array([[43.35      ,  1.36911771,  0.        ],
       [43.35      ,  1.38792942,  0.        ]]), array([[43.35      ,  1.38792942,  0.        ],
       [43.35      ,  1.40374702,  0.        ]]), array([[43.35      ,  1.40374702,  0.        ],
       [43.35      ,  1.42737357,  0.        ]]), array([[43.35      ,  1.42737357,  0.        ],
       [43.35      ,  1.44895432,  0.        ]]), array([[43.35      ,  1.44895432,  0.        ],
       [43.35      ,  1.4605153 ,  0.        ]]), array([[43.35      ,  1.4605153 ,  0.        ],
       [43.35      ,  1.48163688,  0.        ]]), array([[43.35      ,  1.48163688,  0.        ],
       [43.35      ,  1.48881742,  0.        ]]), array([[43.35      ,  1.48881742,  0.        ],
       [43.35      ,  1.49241269,  0.        ]]), array([[43.35      ,  1.49241269,  0.        ],
       [43.35      ,  1.51557949,  0.        ]]), array([[43.35      ,  1.51557949,  0.        ],
       [43.35      ,  1.53128464,  0.        ]]), array([[43.35      ,  1.53128464,  0.        ],
       [43.35      ,  1.54660958,  0.        ]]), array([[43.35      ,  1.54660958,  0.        ],
       [43.35      ,  1.56337711,  0.        ]]), array([[43.35      ,  1.56337711,  0.        ],
       [43.35      ,  1.57549885,  0.        ]]), array([[43.35      ,  1.57549885,  0.        ],
       [43.35      ,  1.59688159,  0.        ]]), array([[43.35      ,  1.59688159,  0.        ],
       [43.35      ,  1.60671009,  0.        ]]), array([[43.35      ,  1.60671009,  0.        ],
       [43.35      ,  1.61155553,  0.        ]]), array([[43.35      ,  1.61155553,  0.        ],
       [43.35      ,  1.62593878,  0.        ]]), array([[43.35      ,  1.62593878,  0.        ],
       [43.35      ,  1.64530505,  0.        ]]), array([[43.35      ,  1.64530505,  0.        ],
       [43.35      ,  1.6724725 ,  0.        ]]), array([[43.35      ,  1.6724725 ,  0.        ],
       [43.35      ,  1.67423197,  0.        ]]), array([[43.35      ,  1.67423197,  0.        ],
       [43.35      ,  1.67609632,  0.        ]]), array([[43.35      ,  1.67609632,  0.        ],
       [43.35      ,  1.69855444,  0.        ]]), array([[43.35      ,  1.69855444,  0.        ],
       [43.35      ,  1.71577326,  0.        ]])], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
[      14] Auxiliary variable calculate_init for model rans2p
[      14] Auxiliary variable calculate_init for model vof
[      14] Auxiliary variable calculate_init for model ncls
[      14] Auxiliary variable calculate_init for model rdls
[      14] Auxiliary variable calculate_init for model mcorr
[      14] Using tnList from so = cox_flume2DV
[      14] Time sequence[0.0, 0.001, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19.0, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20.0, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21.0, 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 22.0, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23.0, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24.0, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25.0, 25.1, 25.2, 25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26.0, 26.1, 26.2, 26.3, 26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27.0, 27.1, 27.2, 27.3, 27.4, 27.5, 27.6, 27.7, 27.8, 27.9, 28.0, 28.1, 28.2, 28.3, 28.4, 28.5, 28.6, 28.7, 28.8, 28.9, 29.0, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.7, 29.8, 29.9, 30.0, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7, 30.8, 30.9, 31.0, 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8, 31.9, 32.0, 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9, 33.0, 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34.0, 34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35.0, 35.1, 35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36.0, 36.1, 36.2, 36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37.0, 37.1, 37.2, 37.3, 37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38.0, 38.1, 38.2, 38.3, 38.4, 38.5, 38.6, 38.7, 38.8, 38.9, 39.0, 39.1, 39.2, 39.3, 39.4, 39.5, 39.6, 39.7, 39.8, 39.9, 40.0, 40.1, 40.2, 40.3, 40.4, 40.5, 40.6, 40.7, 40.8, 40.9, 41.0, 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7, 41.8, 41.9, 42.0, 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8, 42.9, 43.0, 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9, 44.0, 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45.0, 45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46.0, 46.1, 46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47.0, 47.1, 47.2, 47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48.0, 48.1, 48.2, 48.3, 48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49.0, 49.1, 49.2, 49.3, 49.4, 49.5, 49.6, 49.7, 49.8, 49.9, 50.0, 50.1, 50.2, 50.3, 50.4, 50.5, 50.6, 50.7, 50.8, 50.9, 51.0, 51.1, 51.2, 51.3, 51.4, 51.5, 51.6, 51.7, 51.8, 51.9, 52.0, 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7, 52.8, 52.9, 53.0, 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8, 53.9, 54.0, 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9, 55.0, 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56.0, 56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57.0, 57.1, 57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58.0, 58.1, 58.2, 58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59.0, 59.1, 59.2, 59.3, 59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60.0, 60.1, 60.2, 60.3, 60.4, 60.5, 60.6, 60.7, 60.8, 60.9, 61.0, 61.1, 61.2, 61.3, 61.4, 61.5, 61.6, 61.7, 61.8, 61.9, 62.0, 62.1, 62.2, 62.3, 62.4, 62.5, 62.6, 62.7, 62.8, 62.9, 63.0, 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7, 63.8, 63.9, 64.0, 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8, 64.9, 65.0, 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9, 66.0, 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67.0, 67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68.0, 68.1, 68.2, 68.3, 68.4, 68.5, 68.6, 68.7, 68.8, 68.9, 69.0, 69.1, 69.2, 69.3, 69.4, 69.5, 69.6, 69.7, 69.8, 69.9, 70.0, 70.1, 70.2, 70.3, 70.4, 70.5, 70.6, 70.7, 70.8, 70.9, 71.0, 71.1, 71.2, 71.3, 71.4, 71.5, 71.6, 71.7, 71.8, 71.9, 72.0, 72.1, 72.2, 72.3, 72.4, 72.5, 72.6, 72.7, 72.8, 72.9, 73.0, 73.1, 73.2, 73.3, 73.4, 73.5, 73.6, 73.7, 73.8, 73.9, 74.0, 74.1, 74.2, 74.3, 74.4, 74.5, 74.6, 74.7, 74.8, 74.9, 75.0, 75.1, 75.2, 75.3, 75.4, 75.5, 75.6, 75.7, 75.8, 75.9, 76.0, 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.7, 76.8, 76.9, 77.0, 77.1, 77.2, 77.3, 77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78.0, 78.1, 78.2, 78.3, 78.4, 78.5, 78.6, 78.7, 78.8, 78.9, 79.0, 79.1, 79.2, 79.3, 79.4, 79.5, 79.6, 79.7, 79.8, 79.9, 80.0, 80.1, 80.2, 80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9, 81.0, 81.1, 81.2, 81.3, 81.4, 81.5, 81.6, 81.7, 81.8, 81.9, 82.0, 82.1, 82.2, 82.3, 82.4, 82.5, 82.6, 82.7, 82.8, 82.9, 83.0, 83.1, 83.2, 83.3, 83.4, 83.5, 83.6, 83.7, 83.8, 83.9, 84.0, 84.1, 84.2, 84.3, 84.4, 84.5, 84.6, 84.7, 84.8, 84.9, 85.0, 85.1, 85.2, 85.3, 85.4, 85.5, 85.6, 85.7, 85.8, 85.9, 86.0, 86.1, 86.2, 86.3, 86.4, 86.5, 86.6, 86.7, 86.8, 86.9, 87.0, 87.1, 87.2, 87.3, 87.4, 87.5, 87.6, 87.7, 87.8, 87.9, 88.0, 88.1, 88.2, 88.3, 88.4, 88.5, 88.6, 88.7, 88.8, 88.9, 89.0, 89.1, 89.2, 89.3, 89.4, 89.5, 89.6, 89.7, 89.8, 89.9, 90.0, 90.1, 90.2, 90.3, 90.4, 90.5, 90.6, 90.7, 90.8, 90.9, 91.0, 91.1, 91.2, 91.3, 91.4, 91.5, 91.6, 91.7, 91.8, 91.9, 92.0, 92.1, 92.2, 92.3, 92.4, 92.5, 92.6, 92.7, 92.8, 92.9, 93.0, 93.1, 93.2, 93.3, 93.4, 93.5, 93.6, 93.7, 93.8, 93.9, 94.0, 94.1, 94.2, 94.3, 94.4, 94.5, 94.6, 94.7, 94.8, 94.9, 95.0, 95.1, 95.2, 95.3, 95.4, 95.5, 95.6, 95.7, 95.8, 95.9, 96.0, 96.1, 96.2, 96.3, 96.4, 96.5, 96.6, 96.7, 96.8, 96.9, 97.0, 97.1, 97.2, 97.3, 97.4, 97.5, 97.6, 97.7, 97.8, 97.9, 98.0, 98.1, 98.2, 98.3, 98.4, 98.5, 98.6, 98.7, 98.8, 98.9, 99.0, 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9, 100.0]
[      14] NAHeader Num Time Steps 1001
[      14] Setting cox_flume2DV systemStepController to object of type <class 'proteus.SplitOperator.Sequential_MinAdaptiveModelStep'>
[      14] Finished NumericalSolution initialization
[      29] Maximum times across MPI tasks for
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof0
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof1
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof2
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof3
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof4
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof5
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof6
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof7
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof8
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof9
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof10
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof11
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof12
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof13
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof14
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof15
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof16
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof17
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof18
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof19
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof20
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof21
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof22
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof23
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof24
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof25
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof26
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof27
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof28
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof29
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof30
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof31
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof32
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof33
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof34
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof35
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof36
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof37
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof38
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof39
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof40
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof41
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof42
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof43
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof44
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof45
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof46
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof47
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof48
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof49
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof50
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof51
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof52
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof53
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof54
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof55
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof56
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof57
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof58
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof59
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof60
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof61
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof62
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof63
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof64
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof65
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof66
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof67
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof68
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof69
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof70
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof71
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof72
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof73
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof74
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof75
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof76
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof77
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof78
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof79
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof80
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof81
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof82
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof83
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof84
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof85
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof86
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof87
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof88
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof89
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof90
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof91
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof92
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof93
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof94
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof95
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof96
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof97
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof98
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof99
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof100
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof101
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof102
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof103
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof104
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof105
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof106
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof107
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof108
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof109
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof110
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof111
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof112
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof113
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof114
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof115
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof116
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof117
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof118
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof119
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof120
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof121
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof122
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof123
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof124
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof125
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof126
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof127
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof128
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof129
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof130
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof131
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof132
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof133
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof134
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof135
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof136
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof137
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof138
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof139
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof140
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof141
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof142
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof143
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof144
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof145
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof146
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof147
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof148
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof149
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof150
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof151
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof152
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof153
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof154
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof155
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof156
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof157
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof158
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof159
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof160
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof161
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof162
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof163
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof164
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof165
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof166
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof167
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof168
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof169
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof170
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof171
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof172
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof173
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof174
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof175
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof176
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof177
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof178
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof179
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof180
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof181
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof182
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof183
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof184
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof185
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof186
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof187
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof188
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof189
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof190
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof191
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof192
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof193
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof194
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof195
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof196
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof197
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof198
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof199
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof200
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof201
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof202
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof203
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof204
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof205
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof206
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof207
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof208
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof209
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof210
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof211
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof212
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof213
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof214
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof215
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof216
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof217
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof218
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof219
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof220
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof221
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof222
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof223
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof224
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof225
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof226
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof227
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof228
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof229
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof230
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof231
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof232
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof233
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof234
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof235
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof236
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof237
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof238
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof239
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof240
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof241
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof242
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof243
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof244
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof245
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof246
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof247
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof248
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof249
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof250
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof251
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof252
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof253
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof254
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof255

         1924940 function calls (1882657 primitive calls) in 9.061 seconds

   Ordered by: cumulative time
   List reduced from 1058 to 30 due to restriction <30>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.012    0.012    9.062    9.062 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/NumericalSolution.py:71(__init__)
        1    0.000    0.000    5.253    5.253 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6794(generateMesh)
        1    0.000    0.000    5.169    5.169 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6810(_generateMesh)
        1    0.022    0.022    2.620    2.620 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:4914(generateFromExistingCoarseMesh)
        1    2.525    2.525    2.525    2.525 {cpartitioning.partitionNodes}
        1    0.011    0.011    2.384    2.384 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:589(partitionMesh)
        5    0.001    0.000    2.215    0.443 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/NumericalSolution.py:287(<listcomp>)
        3    0.007    0.002    2.194    0.731 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Gauges.py:657(attachModel)
       13    0.001    0.000    2.032    0.156 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Gauges.py:589(getMeshIntersections)
        1    1.677    1.677    1.677    1.677 {built-in method proteus.cmeshTools.generateFromTriangleFiles}
        1    0.000    0.000    1.503    1.503 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:4022(generateFromTriangleFiles)
       13    1.279    0.098    1.279    0.098 {method 'scatter' of 'mpi4py.MPI.Comm' objects}
       13    0.185    0.014    1.112    0.086 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Gauges.py:522(pruneDuplicateSegments)
        1    0.000    0.000    1.107    1.107 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/NumericalSolution.py:316(allocateModels)
        4    1.102    0.276    1.102    0.276 {method 'barrier' of 'petsc4py.PETSc.Comm' objects}
        4    0.000    0.000    1.081    0.270 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Comm.py:83(barrier)
       13    0.066    0.005    1.015    0.078 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6372(getMeshIntersections)
        1    0.000    0.000    1.004    1.004 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/subprocess.py:373(check_output)
        1    0.000    0.000    1.004    1.004 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/subprocess.py:460(run)
        7    1.003    0.143    1.003    0.143 {method 'read' of '_io.BufferedReader' objects}
        1    0.000    0.000    1.003    1.003 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/subprocess.py:1108(communicate)
        5    0.004    0.001    0.942    0.188 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Transport.py:6194(initialize)
        5    0.000    0.000    0.924    0.185 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Transport.py:6159(__init__)
     4788    0.013    0.000    0.661    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/core/arrayprint.py:561(array2string)
    17849    0.373    0.000    0.637    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6176(triangleVerticesToNormals)
     4788    0.011    0.000    0.623    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/core/arrayprint.py:506(wrapper)
     4788    0.021    0.000    0.608    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/core/arrayprint.py:523(_array2string)
        1    0.000    0.000    0.567    0.567 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Archiver.py:44(__init__)
        1    0.000    0.000    0.554    0.554 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/h5py/_hl/files.py:363(__init__)
        1    0.554    0.554    0.554    0.554 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/h5py/_hl/files.py:206(make_fid)


Maximum times across MPI tasks for
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof0
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof1
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof2
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof3
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof4
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof5
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof6
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof7
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof8
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof9
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof10
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof11
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof12
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof13
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof14
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof15
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof16
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof17
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof18
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof19
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof20
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof21
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof22
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof23
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof24
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof25
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof26
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof27
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof28
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof29
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof30
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof31
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof32
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof33
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof34
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof35
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof36
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof37
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof38
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof39
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof40
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof41
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof42
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof43
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof44
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof45
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof46
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof47
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof48
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof49
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof50
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof51
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof52
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof53
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof54
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof55
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof56
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof57
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof58
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof59
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof60
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof61
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof62
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof63
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof64
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof65
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof66
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof67
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof68
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof69
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof70
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof71
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof72
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof73
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof74
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof75
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof76
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof77
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof78
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof79
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof80
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof81
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof82
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof83
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof84
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof85
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof86
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof87
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof88
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof89
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof90
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof91
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof92
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof93
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof94
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof95
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof96
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof97
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof98
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof99
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof100
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof101
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof102
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof103
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof104
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof105
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof106
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof107
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof108
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof109
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof110
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof111
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof112
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof113
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof114
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof115
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof116
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof117
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof118
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof119
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof120
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof121
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof122
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof123
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof124
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof125
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof126
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof127
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof128
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof129
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof130
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof131
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof132
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof133
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof134
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof135
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof136
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof137
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof138
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof139
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof140
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof141
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof142
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof143
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof144
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof145
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof146
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof147
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof148
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof149
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof150
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof151
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof152
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof153
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof154
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof155
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof156
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof157
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof158
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof159
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof160
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof161
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof162
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof163
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof164
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof165
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof166
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof167
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof168
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof169
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof170
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof171
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof172
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof173
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof174
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof175
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof176
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof177
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof178
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof179
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof180
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof181
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof182
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof183
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof184
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof185
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof186
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof187
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof188
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof189
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof190
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof191
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof192
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof193
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof194
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof195
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof196
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof197
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof198
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof199
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof200
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof201
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof202
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof203
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof204
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof205
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof206
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof207
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof208
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof209
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof210
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof211
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof212
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof213
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof214
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof215
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof216
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof217
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof218
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof219
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof220
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof221
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof222
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof223
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof224
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof225
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof226
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof227
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof228
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof229
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof230
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof231
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof232
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof233
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof234
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof235
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof236
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof237
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof238
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof239
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof240
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof241
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof242
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof243
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof244
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof245
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof246
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof247
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof248
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof249
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof250
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof251
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof252
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof253
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof254
Thu Feb  8 14:59:20 2024    cox_flume2DV0_init_prof255

         1924940 function calls (1882657 primitive calls) in 9.061 seconds

   Ordered by: internal time
   List reduced from 1058 to 30 due to restriction <30>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    2.525    2.525    2.525    2.525 {cpartitioning.partitionNodes}
        1    1.677    1.677    1.677    1.677 {built-in method proteus.cmeshTools.generateFromTriangleFiles}
       13    1.279    0.098    1.279    0.098 {method 'scatter' of 'mpi4py.MPI.Comm' objects}
        4    1.102    0.276    1.102    0.276 {method 'barrier' of 'petsc4py.PETSc.Comm' objects}
        7    1.003    0.143    1.003    0.143 {method 'read' of '_io.BufferedReader' objects}
        1    0.554    0.554    0.554    0.554 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/h5py/_hl/files.py:206(make_fid)
       27    0.436    0.016    0.436    0.016 {method 'createGhostWithArray' of 'petsc4py.PETSc.Vec' objects}
    17849    0.373    0.000    0.637    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6176(triangleVerticesToNormals)
       13    0.221    0.017    0.224    0.017 {method 'gather' of 'mpi4py.MPI.Comm' objects}
        6    0.194    0.032    0.194    0.032 {built-in method io.open_code}
       13    0.185    0.014    1.112    0.086 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Gauges.py:522(pruneDuplicateSegments)
       13    0.179    0.014    0.179    0.014 {method 'allreduce' of 'mpi4py.MPI.Comm' objects}
   215253    0.156    0.000    0.156    0.000 {method 'dot' of 'numpy.ndarray' objects}
        2    0.138    0.069    0.138    0.069 {method 'ghostUpdateBegin' of 'petsc4py.PETSc.Vec' objects}
        1    0.137    0.137    0.137    0.137 {method 'Reduce' of 'mpi4py.MPI.Comm' objects}
    17706    0.120    0.000    0.378    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6317(intersectPolyhedron)
        5    0.114    0.023    0.114    0.023 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Transport.py:4248(updateLocal2Global)
        2    0.111    0.056    0.111    0.056 {method 'ghostUpdateEnd' of 'petsc4py.PETSc.Vec' objects}
43092/4788    0.108    0.000    0.249    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/core/arrayprint.py:789(recurser)
    35148    0.093    0.000    0.161    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/linalg/linalg.py:2357(norm)
        2    0.084    0.042    0.084    0.042 {method 'Gatherv' of 'mpi4py.MPI.Comm' objects}
       13    0.084    0.006    0.084    0.006 {method 'getOffsets_CSR' of 'csparsity.PySparsityInfo' objects}
     4788    0.079    0.000    0.284    0.000 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/core/arrayprint.py:934(fillFormat)
        5    0.076    0.015    0.076    0.015 {method 'setPreallocationCSR' of 'petsc4py.PETSc.Mat' objects}
        8    0.075    0.009    0.075    0.009 {method 'setUp' of 'petsc4py.PETSc.Mat' objects}
        4    0.071    0.018    0.071    0.018 {built-in method posix.waitpid}
       13    0.066    0.005    1.015    0.078 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6372(getMeshIntersections)
   167935    0.063    0.000    0.063    0.000 {built-in method numpy.asarray}
        1    0.063    0.063    0.065    0.065 /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/PostProcessingTools.py:547(__init__)
        5    0.053    0.011    0.053    0.011 {method 'createWithArray' of 'petsc4py.PETSc.Vec' objects}



[      29] 
Wall clock percentage of top 20 calls
-------------------------------------
      27.9% cpartitioning.partitionNodes
      18.5% built-in method proteus.cmeshTools.generateFromTriangleFiles
      14.1% method 'scatter' of 'mpi4py.MPI.Comm' objects
      12.2% method 'barrier' of 'petsc4py.PETSc.Comm' objects
      11.1% method 'read' of '_io.BufferedReader' objects
       6.1% function 'make_fid' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/h5py/_hl/files.py:206
       4.8% method 'createGhostWithArray' of 'petsc4py.PETSc.Vec' objects
       4.1% function 'triangleVerticesToNormals' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6176
       2.4% method 'gather' of 'mpi4py.MPI.Comm' objects
       2.1% built-in method io.open_code
       2.0% function 'pruneDuplicateSegments' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Gauges.py:522
       2.0% method 'allreduce' of 'mpi4py.MPI.Comm' objects
       1.7% method 'dot' of 'numpy.ndarray' objects
       1.5% method 'ghostUpdateBegin' of 'petsc4py.PETSc.Vec' objects
       1.5% method 'Reduce' of 'mpi4py.MPI.Comm' objects
       1.3% function 'intersectPolyhedron' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/MeshTools.py:6317
       1.3% function 'updateLocal2Global' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/proteus/Transport.py:4248
       1.2% method 'ghostUpdateEnd' of 'petsc4py.PETSc.Vec' objects
       1.2% function 'recurser' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/core/arrayprint.py:789
       1.0% function 'norm' at /ddnA/project/cekees/cekees/proteus/fct/lib/python3.10/site-packages/numpy/linalg/linalg.py:2357

[      29] Representing 118.1365193204291%
[      29] Setting initial conditions
[      29] Setting initial conditions for rans2p
[      29] Setting initial conditions on model rans2p
[      29] Setting initial conditions for vof
[      29] Setting initial conditions on model vof
[      29] Setting initial conditions for ncls
[      29] Setting initial conditions on model ncls
[      29] Setting initial conditions for rdls
[      29] Setting initial conditions on model rdls
[      29] Setting initial conditions for mcorr
[      29] Setting initial conditions on model mcorr
[      29] Attaching models and running spin-up step if requested
[      29] Attaching models to model rans2p
[      29] Attaching models to model vof
[      29] Attaching models to model ncls
[      29] Attaching models to model rdls
[      29] Attaching models to model mcorr
[      29] Attaching models in LevelSetConservation
[      29] Maximum CFL = 0.0
[      30] ...   Current dt = 1.0
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] ...   Current dt = 1.0
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30]    Mass Conservation Error: 0.002016926270012935
[      30] Attaching models to model rans2p
[      30] Attaching models to model vof
[      30] Attaching models to model ncls
[      30] Attaching models to model rdls
[      30] Attaching models to model mcorr
[      30] Attaching models in LevelSetConservation
[      30] Archiving initial conditions
[      30] Writing initial mesh for  model = rans2p
[      30] Writing initial conditions for  model = rans2p
[      30] Estimating initial time derivative and initializing time history for model rans2p
[      30] Maximum CFL = 0.0
[      30] RANS2P: max numDiff_1 1.354767e+00 numDiff_2 1.354767e+00 numDiff_3 1.354767e+00
[      30] Maximum CFL = 0.0
[      30] Choosing initial time step for model rans2p
[      30] Initializing time step on model rans2p to dt =  3.30000e+05
[      30] Maximum CFL = 0.0
[      30] Initializing time history for model step controller
[      30] Archiving initial conditions
[      30] Writing initial mesh for  model = vof
[      30] Writing initial conditions for  model = vof
[      30] Estimating initial time derivative and initializing time history for model vof
[      30] ...   Current dt = 1.0
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] VOF: max numDiff 1.041464e-02
[      30] ...   Current dt = 1.0
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] Choosing initial time step for model vof
[      30] Initializing time step on model vof to dt =  3.30000e+05
[      30] ...   Current dt = 330000.00000000006
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] Initializing time history for model step controller
[      30] Archiving initial conditions
[      30] Writing initial mesh for  model = ncls
[      30] Writing initial conditions for  model = ncls
[      30] Estimating initial time derivative and initializing time history for model ncls
[      30] ...   Current dt = 1.0
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] NCLS: max numDiff 6.368116e-03
[      30] ...   Current dt = 1.0
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] Choosing initial time step for model ncls
[      30] Initializing time step on model ncls to dt =  3.30000e+05
[      30] ...   Current dt = 330000.00000000006
[      30] ...   Maximum Cell Based CFL = 0.0
[      30] ...   Maximum Edge Based CFL = 0.0
[      30] Initializing time history for model step controller
[      30] Archiving initial conditions
[      30] Writing initial mesh for  model = rdls
[      30] Writing initial conditions for  model = rdls
[      31] Estimating initial time derivative and initializing time history for model rdls
[      31] RDLS: max numDiff 6.779839e-14
[      31] Choosing initial time step for model rdls
[      31] Initializing time step on model rdls to dt =  1.00000e-03
[      31] Initializing time history for model step controller
[      31] Archiving initial conditions
[      31] Writing initial mesh for  model = mcorr
[      31] Writing initial conditions for  model = mcorr
[      31] Syncing Archive
[      31] Gathering Archive Time step
[      31] Done Gathering Archive Time Step
[      31] Done Syncing Archive
[      31] Estimating initial time derivative and initializing time history for model mcorr
[      31]    Mass Conservation Error: 0.002016926270012935
[      31]    Mass Conservation Error: 0.002016926270012935
[      31] Choosing initial time step for model mcorr
[      31] Initializing time step on model mcorr to dt =  3.30000e+05
[      31]    Mass Conservation Error: 0.002016926270012935
[      31] Initializing time history for model step controller
[      31] Initializing time step on system Default System to dt =  1.00000e-03
[      31] Initializing step sequence for system Default System to [(0.001, <proteus.Transport.MultilevelTransport object at 0x14893c4bcfd0>), (0.001, <proteus.Transport.MultilevelTransport object at 0x14893d3c0910>), (0.001, <proteus.Transport.MultilevelTransport object at 0x14893d3aa0b0>), (0.001, <proteus.Transport.MultilevelTransport object at 0x14893d3f05b0>), (0.001, <proteus.Transport.MultilevelTransport object at 0x1489324688b0>)]
[      31] Starting time stepping
[      31] ==============================================================
[      31] Solving over interval [ 0.00000e+00, 1.00000e-03]
[      31] ==============================================================
[      31] System time step t= 1.00000e-03, dt= 1.00000e-03
[      31] saving previous velocity dofs 0
[      31] Split operator iteration 0
[      31] Model: rans2p
[      31] Fractional step  1.00000e-03 for model rans2p
[      31] Model step t= 1.00000e-03, dt= 1.00000e-03 for model rans2p
[      31] Model substep t= 3.30000e+05 for model rans2p
[      31] Model substep t= 3.30000e+05 for model rans2p model.timeIntegration.t=  1.00000e-03
[      31] Maximum CFL = 0.0
[      31]    Newton it 0 norm(r) =  1.99761e+01  		 norm(r)/(rtol*norm(r0)+atol) = 1.24851e+07 test=r
[      42] before ksp.rtol= 0.01 ksp.atol= 1.6e-08 ksp.converged= False ksp.its= 0 ksp.norm= 0.0 
[      42] after ksp.rtol= 0.01 ksp.atol= 1.6e-08 ksp.converged= True ksp.its= 1 ksp.norm= 0.0 reason = 4
[      42] KSPpetsc4py return flag False
[      42] KSP converged flag True
[      42] Maximum CFL = 0.00027435450967208555
[      42]    Newton it 1 norm(r) =  2.95121e-03  		 norm(r)/(rtol*norm(r0)+atol) = 1844.5 test=r
[      44] before ksp.rtol= 0.01 ksp.atol= 1.6e-08 ksp.converged= False ksp.its= 1 ksp.norm= 0.0 
[      44] after ksp.rtol= 0.01 ksp.atol= 1.6e-08 ksp.converged= True ksp.its= 1 ksp.norm= 0.0 reason = 4
[      44] KSPpetsc4py return flag False
[      44] KSP converged flag True
[      44] Maximum CFL = 0.00027435390905420216
[      44]    Newton it 2 norm(r) =  1.36004e-06  		 norm(r)/(rtol*norm(r0)+atol) =  8.50024e-01
[      44] Max local conservation (dgp1 enriched all elements) =  1.02105e-10
[      44] Global divergence = -1.60597e-18
[      44] Step Taken, t_stepSequence= 0.001 Model step t= 1.00000e-03, dt= 1.00000e-03 for model rans2p
[      44] Model: vof
[      44] Fractional step  1.00000e-03 for model vof
[      44] Phase  0 mass before VOF step =  8.58266e+01
[      44] Model step t= 1.00000e-03, dt= 1.00000e-03 for model vof
[      44] Model substep t= 3.30000e+05 for model vof
[      44] Model substep t= 3.30000e+05 for model vof model.timeIntegration.t=  1.00000e-03
[      44] ...   Current dt = 0.001
[      44] ...   Maximum Cell Based CFL = 0.0002760720220311188
[      44] ...   Maximum Edge Based CFL = 0.0
[      44]    Newton it 0 norm(r) =  4.91603e-04  		 norm(r)/(rtol*norm(r0)+atol) = 307.252 test=r
[      45] before ksp.rtol= 0.001 ksp.atol= 1.6000000000000003e-09 ksp.converged= False ksp.its= 0 ksp.norm= 0.0 
[      45] after ksp.rtol= 0.001 ksp.atol= 1.6000000000000003e-09 ksp.converged= True ksp.its= 1 ksp.norm= 0.0 reason = 4
[      45] KSPpetsc4py return flag False
[      45] KSP converged flag True
[      45] ...   Current dt = 0.001
[      45] ...   Maximum Cell Based CFL = 0.0002760720220311188
[      45] ...   Maximum Edge Based CFL = 0.0
[      45]    Newton it 1 norm(r) =  9.16685e-05  		 norm(r)/(rtol*norm(r0)+atol) = 57.2928 test=r
[      46] before ksp.rtol= 0.001 ksp.atol= 1.6000000000000003e-09 ksp.converged= False ksp.its= 1 ksp.norm= 0.0 
[      46] after ksp.rtol= 0.001 ksp.atol= 1.6000000000000003e-09 ksp.converged= True ksp.its= 1 ksp.norm= 0.0 reason = 4
[      46] KSPpetsc4py return flag False
[      46] KSP converged flag True
[      46] ...   Current dt = 0.001
[      46] ...   Maximum Cell Based CFL = 0.0002760720220311188
[      46] ...   Maximum Edge Based CFL = 0.0
[      46]    Newton it 2 norm(r) =  1.40559e-05  		 norm(r)/(rtol*norm(r0)+atol) = 8.78497 test=r
[      46] before ksp.rtol= 0.001 ksp.atol= 1.6000000000000003e-09 ksp.converged= False ksp.its= 1 ksp.norm= 0.0 
[      46] after ksp.rtol= 0.001 ksp.atol= 1.6000000000000003e-09 ksp.converged= True ksp.its= 1 ksp.norm= 0.0 reason = 4
[      46] KSPpetsc4py return flag False
[      46] KSP converged flag True
[      46] ...   Current dt = 0.001
[      46] ...   Maximum Cell Based CFL = 0.0002760720220311188
[      46] ...   Maximum Edge Based CFL = 0.0
[      46]    Newton it 3 norm(r) =  4.32401e-06  		 norm(r)/(rtol*norm(r0)+atol) = 2.7025 test=r
